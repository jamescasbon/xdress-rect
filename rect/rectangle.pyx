################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
from libc.stdlib cimport free

unit_square = _wrap_existing_Rectangle(cpp_rectangle.unit_square)

empty_rect = _wrap_existing_Rectangle(&cpp_rectangle.empty_rect)




cdef class Rectangle:
    """no docstring for {'tarbase': 'rectangle', 'tarname': 'Rectangle', 'language': 'c++', 'srcname': 'Rectangle', 'sidecars': (), 'incfiles': ('src/rectangle.h',), 'srcfiles': ('src/rectangle.cpp', 'src/rectangle.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True




        # cached property defaults


    def _rectangle_rectangle_0(self, ):
        """Rectangle(self)
        """
        self._inst = new cpp_rectangle.Rectangle()


    def _rectangle_rectangle_1(self, x0, y0, x1, y1):
        """Rectangle(self, x0, y0, x1, y1)
        """
        self._inst = new cpp_rectangle.Rectangle(<int> x0, <int> y0, <int> x1, <int> y1)


    _rectangle_rectangle_0_argtypes = frozenset()
    _rectangle_rectangle_1_argtypes = frozenset(((0, int), (1, int), (2, int), (3, int), ("x0", int), ("y0", int), ("x1", int), ("y1", int)))

    def __init__(self, *args, **kwargs):
        """Rectangle(self, x0, y0, x1, y1)
        """
        if '__skip_init' in kwargs:
            return
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.items()])
        # vtable-like dispatch for exactly matching types
        if types <= self._rectangle_rectangle_0_argtypes:
            self._rectangle_rectangle_0(*args, **kwargs)
            return
        if types <= self._rectangle_rectangle_1_argtypes:
            self._rectangle_rectangle_1(*args, **kwargs)
            return
        # duck-typed dispatch based on whatever works!
        try:
            self._rectangle_rectangle_0(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._rectangle_rectangle_1(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method __init__() could not be dispatched')

    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property x0:
        """no docstring for x0, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).x0)

        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).x0 = <int> value


    property x1:
        """no docstring for x1, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).x1)

        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).x1 = <int> value


    property y0:
        """no docstring for y0, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).y0)

        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).y0 = <int> value


    property y1:
        """no docstring for y1, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).y1)

        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).y1 = <int> value


    # methods
    def getArea(self, ):
        """getArea(self)
        no docstring for getArea, please file a bug report!"""
        cdef int rtnval
        rtnval = (<cpp_rectangle.Rectangle *> self._inst).getArea()
        return int(rtnval)


    def getHeight(self, ):
        """getHeight(self)
        no docstring for getHeight, please file a bug report!"""
        cdef int rtnval
        rtnval = (<cpp_rectangle.Rectangle *> self._inst).getHeight()
        return int(rtnval)


    def getLength(self, ):
        """getLength(self)
        no docstring for getLength, please file a bug report!"""
        cdef int rtnval
        rtnval = (<cpp_rectangle.Rectangle *> self._inst).getLength()
        return int(rtnval)


    def move(self, dx, dy):
        """move(self, dx, dy)
        no docstring for move, please file a bug report!"""
        (<cpp_rectangle.Rectangle *> self._inst).move(<int> dx, <int> dy)




    pass



cdef _wrap_existing_Rectangle(cpp_rectangle.Rectangle * c_inst):
    py_inst = Rectangle(__skip_init=True)
    py_inst._inst = c_inst
    py_inst._free_inst = False
    return py_inst







{'cpppxd_footer': '', 'pyx_header': '', 'pxd_header': '', 'pxd_footer': '', 'cpppxd_header': '', 'pyx_footer': ''}
