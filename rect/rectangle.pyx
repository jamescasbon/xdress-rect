################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
from cython.operator cimport dereference as deref
from libc.stdlib cimport free

import warnings



cdef class Rectangle:
    """no docstring for {'sidecars': (), 'tarbase': 'rectangle', 'tarname': 'Rectangle', 'language': 'c++', 'srcname': 'Rectangle', 'incfiles': ('src/rectangle.h',), 'srcfiles': ('src/rectangle.cpp', 'src/rectangle.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self, x0, y0, x1, y1):
        """Rectangle(self, x0, y0, x1, y1)
        """
        self._inst = new cpp_rectangle.Rectangle(<int> x0, <int> y0, <int> x1, <int> y1)
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property x0:
        """no docstring for x0, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).x0)
    
        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).x0 = <int> value
    
    
    property x1:
        """no docstring for x1, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).x1)
    
        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).x1 = <int> value
    
    
    property y0:
        """no docstring for y0, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).y0)
    
        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).y0 = <int> value
    
    
    property y1:
        """no docstring for y1, please file a bug report!"""
        def __get__(self):
            return int((<cpp_rectangle.Rectangle *> self._inst).y1)
    
        def __set__(self, value):
            (<cpp_rectangle.Rectangle *> self._inst).y1 = <int> value
    
    
    # methods
    def do_with_area(self, _0, _1):
        """do_with_area(self, , )
        no docstring for do_with_area, please file a bug report!"""
        (<cpp_rectangle.Rectangle *> self._inst).do_with_area(cdef void _0_proxy(void * _0, int _1):
        
        
            global _0
        
            call_rtn = _0(None, int(_1))
        
            return NULL
        , NULL)
    
    
    def getArea(self, ):
        """getArea(self)
        no docstring for getArea, please file a bug report!"""
        cdef int rtnval
        rtnval = (<cpp_rectangle.Rectangle *> self._inst).getArea()
        return int(rtnval)
    
    
    def getHeight(self, ):
        """getHeight(self)
        no docstring for getHeight, please file a bug report!"""
        cdef int rtnval
        rtnval = (<cpp_rectangle.Rectangle *> self._inst).getHeight()
        return int(rtnval)
    
    
    def getLength(self, ):
        """getLength(self)
        no docstring for getLength, please file a bug report!"""
        cdef int rtnval
        rtnval = (<cpp_rectangle.Rectangle *> self._inst).getLength()
        return int(rtnval)
    
    
    def move(self, dx, dy):
        """move(self, dx, dy)
        no docstring for move, please file a bug report!"""
        (<cpp_rectangle.Rectangle *> self._inst).move(<int> dx, <int> dy)
    
    
    

    pass






{'cpppxd_footer': '', 'pyx_header': '', 'pxd_header': '', 'pxd_footer': '', 'cpppxd_header': '', 'pyx_footer': ''}
