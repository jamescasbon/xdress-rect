/* Generated by Cython 0.19.2 on Wed Jan  8 10:00:01 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (Py_TYPE(obj) == &PyBaseString_Type)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__rect__dtypes
#define __PYX_HAVE_API__rect__dtypes
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "xdress_extra_types.h"
#include "src/rectangle.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "structmember.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "dtypes.pyx",
  "numpy.pxd",
  "type.pxd",
  "rectangle.pxd",
};

/* "numpy.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "numpy.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "numpy.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "numpy.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "numpy.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "numpy.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "numpy.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "numpy.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "numpy.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "numpy.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "numpy.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "numpy.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "numpy.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "numpy.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "numpy.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "numpy.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "numpy.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "numpy.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "numpy.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "numpy.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "numpy.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "xdress_extra_types.pxd":14
 *     cdef void emit_endif "#endif //" ()
 * 
 * ctypedef unsigned char uchar             # <<<<<<<<<<<<<<
 * ctypedef long long int64
 * ctypedef unsigned short uint16
 */
typedef unsigned char __pyx_t_4rect_18xdress_extra_types_uchar;

/* "xdress_extra_types.pxd":15
 * 
 * ctypedef unsigned char uchar
 * ctypedef long long int64             # <<<<<<<<<<<<<<
 * ctypedef unsigned short uint16
 * ctypedef unsigned int uint32
 */
typedef PY_LONG_LONG __pyx_t_4rect_18xdress_extra_types_int64;

/* "xdress_extra_types.pxd":16
 * ctypedef unsigned char uchar
 * ctypedef long long int64
 * ctypedef unsigned short uint16             # <<<<<<<<<<<<<<
 * ctypedef unsigned int uint32
 * ctypedef unsigned long long uint64
 */
typedef unsigned short __pyx_t_4rect_18xdress_extra_types_uint16;

/* "xdress_extra_types.pxd":17
 * ctypedef long long int64
 * ctypedef unsigned short uint16
 * ctypedef unsigned int uint32             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long uint64
 * ctypedef long double float128
 */
typedef unsigned int __pyx_t_4rect_18xdress_extra_types_uint32;

/* "xdress_extra_types.pxd":18
 * ctypedef unsigned short uint16
 * ctypedef unsigned int uint32
 * ctypedef unsigned long long uint64             # <<<<<<<<<<<<<<
 * ctypedef long double float128
 * 
 */
typedef unsigned PY_LONG_LONG __pyx_t_4rect_18xdress_extra_types_uint64;

/* "xdress_extra_types.pxd":19
 * ctypedef unsigned int uint32
 * ctypedef unsigned long long uint64
 * ctypedef long double float128             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "xdress_extra_types.h":
 */
typedef long double __pyx_t_4rect_18xdress_extra_types_float128;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_4rect_9rectangle_AreaHandlerStruct;
struct __pyx_obj_4rect_9rectangle_Rectangle;

/* "numpy.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "numpy.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "numpy.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "numpy.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_4rect_6dtypes_PyXDInt_Type;
typedef struct __pyx_t_4rect_6dtypes_PyXDInt_Type __pyx_t_4rect_6dtypes_PyXDInt_Type;
struct __pyx_t_4rect_6dtypes_PyXDRectangle_Type;
typedef struct __pyx_t_4rect_6dtypes_PyXDRectangle_Type __pyx_t_4rect_6dtypes_PyXDRectangle_Type;

/* "rect/dtypes.pxd":144
 * 
 * # int dtype
 * ctypedef struct PyXDInt_Type:             # <<<<<<<<<<<<<<
 *     Py_ssize_t ob_refcnt
 *     PyTypeObject *ob_typ
 */
struct __pyx_t_4rect_6dtypes_PyXDInt_Type {
  Py_ssize_t ob_refcnt;
  PyTypeObject *ob_typ;
  int obval;
};

/* "rect/dtypes.pxd":157
 * 
 * # cpp_rectangle.Rectangle dtype
 * ctypedef struct PyXDRectangle_Type:             # <<<<<<<<<<<<<<
 *     Py_ssize_t ob_refcnt
 *     PyTypeObject *ob_typ
 */
struct __pyx_t_4rect_6dtypes_PyXDRectangle_Type {
  Py_ssize_t ob_refcnt;
  PyTypeObject *ob_typ;
  shapes::Rectangle obval;
};

/* "rectangle.pxd":42
 * cdef unsigned int _MAX_CALLBACKS_AreaHandlerStruct
 * 
 * cdef class AreaHandlerStruct:             # <<<<<<<<<<<<<<
 *     cdef void * _inst
 *     cdef public bint _free_inst
 */
struct __pyx_obj_4rect_9rectangle_AreaHandlerStruct {
  PyObject_HEAD
  void *_inst;
  int _free_inst;
  PyObject *_op;
  unsigned int _op_vtab_i;
};


/* "rectangle.pxd":16
 * 
 * 
 * cdef class Rectangle:             # <<<<<<<<<<<<<<
 *     cdef void * _inst
 *     cdef public bint _free_inst
 */
struct __pyx_obj_4rect_9rectangle_Rectangle {
  PyObject_HEAD
  void *_inst;
  int _free_inst;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#define __Pyx_SetItemInt(o, i, v, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_SetItemInt_Fast(o, i, v, is_list, wraparound, boundscheck) : \
    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_Py_intptr_t(Py_intptr_t);

static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_from_py_Py_intptr_t(PyObject *);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'rect.xdress_extra_types' */

/* Module declarations from 'rect' */

/* Module declarations from 'rect.cpp_rectangle' */

/* Module declarations from 'rect.rectangle' */
static PyTypeObject *__pyx_ptype_4rect_9rectangle_Rectangle = 0;
static PyTypeObject *__pyx_ptype_4rect_9rectangle_AreaHandlerStruct = 0;
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy0 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy0 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy0)
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy1 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy1 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy1)
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy2 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy2 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy2)
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy3 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy3 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy3)
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy4 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy4 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy4)
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy5 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy5 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy5)
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy6 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy6 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy6)
static PyObject **__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy7 = 0;
#define __pyx_v_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy7 (*__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy7)
static unsigned int *__pyx_vp_4rect_9rectangle__current__xdress_AreaHandlerStruct_op_proxy_vtab_i = 0;
#define __pyx_v_4rect_9rectangle__current__xdress_AreaHandlerStruct_op_proxy_vtab_i (*__pyx_vp_4rect_9rectangle__current__xdress_AreaHandlerStruct_op_proxy_vtab_i)
static unsigned int *__pyx_vp_4rect_9rectangle__MAX_CALLBACKS_AreaHandlerStruct = 0;
#define __pyx_v_4rect_9rectangle__MAX_CALLBACKS_AreaHandlerStruct (*__pyx_vp_4rect_9rectangle__MAX_CALLBACKS_AreaHandlerStruct)
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func0)(int); /*proto*/
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func1)(int); /*proto*/
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func2)(int); /*proto*/
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func3)(int); /*proto*/
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func4)(int); /*proto*/
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func5)(int); /*proto*/
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func6)(int); /*proto*/
static double (*__pyx_f_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy_func7)(int); /*proto*/

/* Module declarations from 'rect.dtypes' */
static xdress_extra_types::MemoryKnight<int> __pyx_v_4rect_6dtypes_mk_int;
static xdress_extra_types::MemoryKnight<__pyx_t_4rect_6dtypes_PyXDInt_Type> __pyx_v_4rect_6dtypes_mk_int_type;
static PyArray_ArrFuncs __pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs;
static PyMemberDef __pyx_v_4rect_6dtypes_pyxd_int_type_members[1];
static PyGetSetDef __pyx_v_4rect_6dtypes_pyxd_int_type_getset[1];
static int __pyx_v_4rect_6dtypes_pyxd_int_is_ready;
static PyObject *__pyx_v_4rect_6dtypes_PyXD_Int = 0;
static PyArray_Descr *__pyx_v_4rect_6dtypes_c_xd_int_descr;
static PyObject *__pyx_v_4rect_6dtypes_xd_int_descr = 0;
static int __pyx_v_4rect_6dtypes_xd_int_num;
static xdress_extra_types::MemoryKnight<shapes::Rectangle> __pyx_v_4rect_6dtypes_mk_rectangle;
static xdress_extra_types::MemoryKnight<__pyx_t_4rect_6dtypes_PyXDRectangle_Type> __pyx_v_4rect_6dtypes_mk_rectangle_type;
static PyArray_ArrFuncs __pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs;
static PyMemberDef __pyx_v_4rect_6dtypes_pyxd_rectangle_type_members[1];
static PyGetSetDef __pyx_v_4rect_6dtypes_pyxd_rectangle_type_getset[1];
static int __pyx_v_4rect_6dtypes_pyxd_rectangle_is_ready;
static PyObject *__pyx_v_4rect_6dtypes_PyXD_Rectangle = 0;
static PyArray_Descr *__pyx_v_4rect_6dtypes_c_xd_rectangle_descr;
static PyObject *__pyx_v_4rect_6dtypes_xd_rectangle_descr = 0;
static int __pyx_v_4rect_6dtypes_xd_rectangle_num;
static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_getitem(void *, void *); /*proto*/
static int __pyx_f_4rect_6dtypes_pyxd_int_setitem(PyObject *, void *, void *); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_int_copyswapn(void *, npy_intp, void *, npy_intp, npy_intp, int, void *); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_int_copyswap(void *, void *, int, void *); /*proto*/
static npy_bool __pyx_f_4rect_6dtypes_pyxd_int_nonzero(void *, void *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_getitem(void *, void *); /*proto*/
static int __pyx_f_4rect_6dtypes_pyxd_rectangle_setitem(PyObject *, void *, void *); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_rectangle_copyswapn(void *, npy_intp, void *, npy_intp, npy_intp, int, void *); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_rectangle_copyswap(void *, void *, int, void *); /*proto*/
static npy_bool __pyx_f_4rect_6dtypes_pyxd_rectangle_nonzero(void *, void *); /*proto*/
static int __pyx_f_4rect_6dtypes_pyxd_int_compare(void const *, void const *, void *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_alloc(PyTypeObject *, Py_ssize_t); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_int_type_dealloc(PyObject *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_new(PyTypeObject *, PyObject *, PyObject *); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_int_type_free(void *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_str(PyObject *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_repr(PyObject *); /*proto*/
static int __pyx_f_4rect_6dtypes_pyxd_int_type_compare(PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_richcompare(PyObject *, PyObject *, int); /*proto*/
static long __pyx_f_4rect_6dtypes_pyxd_int_type_hash(PyObject *); /*proto*/
static int __pyx_f_4rect_6dtypes_pyxd_rectangle_compare(void const *, void const *, void *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_alloc(PyTypeObject *, Py_ssize_t); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_rectangle_type_dealloc(PyObject *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_new(PyTypeObject *, PyObject *, PyObject *); /*proto*/
static void __pyx_f_4rect_6dtypes_pyxd_rectangle_type_free(void *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_str(PyObject *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_repr(PyObject *); /*proto*/
static int __pyx_f_4rect_6dtypes_pyxd_rectangle_type_compare(PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_richcompare(PyObject *, PyObject *, int); /*proto*/
static long __pyx_f_4rect_6dtypes_pyxd_rectangle_type_hash(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "rect.dtypes"
int __pyx_module_is_main_rect__dtypes = 0;

/* Implementation of 'rect.dtypes' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_1[] = "ndarray is not C contiguous";
static char __pyx_k_3[] = "ndarray is not Fortran contiguous";
static char __pyx_k_5[] = "Non-native byte order not supported";
static char __pyx_k_7[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_8[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_11[] = "Format string allocated too short.";
static char __pyx_k_13[] = "Python scalar type for int";
static char __pyx_k_14[] = "Python scalar type for cpp_rectangle.Rectangle";
static char __pyx_k__B[] = "B";
static char __pyx_k__H[] = "H";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__O[] = "O";
static char __pyx_k__Q[] = "Q";
static char __pyx_k__b[] = "b";
static char __pyx_k__d[] = "d";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__l[] = "l";
static char __pyx_k__q[] = "q";
static char __pyx_k__Zd[] = "Zd";
static char __pyx_k__Zf[] = "Zf";
static char __pyx_k__Zg[] = "Zg";
static char __pyx_k__id[] = "id";
static char __pyx_k__np[] = "np";
static char __pyx_k__doc[] = "doc";
static char __pyx_k__int[] = "int";
static char __pyx_k__name[] = "name";
static char __pyx_k__type[] = "type";
static char __pyx_k__XDInt[] = "XDInt";
static char __pyx_k__flags[] = "flags";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__range[] = "range";
static char __pyx_k__dtypes[] = "dtypes";
static char __pyx_k__offset[] = "offset";
static char __pyx_k__xd_int[] = "xd_int";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__rectangle[] = "rectangle";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k____import__[] = "__import__";
static char __pyx_k__basestring[] = "basestring";
static char __pyx_k__XDRectangle[] = "XDRectangle";
static char __pyx_k__collections[] = "collections";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__xd_rectangle[] = "xd_rectangle";
static char __pyx_k__NotImplemented[] = "NotImplemented";
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_kp_u_11;
static PyObject *__pyx_kp_u_3;
static PyObject *__pyx_kp_u_5;
static PyObject *__pyx_kp_u_7;
static PyObject *__pyx_kp_u_8;
static PyObject *__pyx_n_s__NotImplemented;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s__XDInt;
static PyObject *__pyx_n_s__XDRectangle;
static PyObject *__pyx_n_s____import__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__basestring;
static PyObject *__pyx_n_s__collections;
static PyObject *__pyx_n_s__doc;
static PyObject *__pyx_n_s__dtypes;
static PyObject *__pyx_n_s__flags;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__int;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__offset;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__rectangle;
static PyObject *__pyx_n_s__type;
static PyObject *__pyx_n_s__xd_int;
static PyObject *__pyx_n_s__xd_rectangle;
static PyObject *__pyx_int_15;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_12;

/* "rect/dtypes.pyx":49
 * cdef MemoryKnight[PyXDInt_Type] mk_int_type = MemoryKnight[PyXDInt_Type]()
 * 
 * cdef object pyxd_int_getitem(void * data, void * arr):             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_getitem(void *__pyx_v_data, CYTHON_UNUSED void *__pyx_v_arr) {
  PyObject *__pyx_v_pyval = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_getitem", 0);

  /* "rect/dtypes.pyx":52
 * 
 * 
 *     pyval = int((<int *> data)[0])             # <<<<<<<<<<<<<<
 *     return pyval
 * 
 */
  __pyx_t_1 = PyInt_FromLong((((int *)__pyx_v_data)[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_pyval = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":53
 * 
 *     pyval = int((<int *> data)[0])
 *     return pyval             # <<<<<<<<<<<<<<
 * 
 * cdef int pyxd_int_setitem(object value, void * data, void * arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyval);
  __pyx_r = __pyx_v_pyval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rect.dtypes.pyxd_int_getitem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":55
 *     return pyval
 * 
 * cdef int pyxd_int_setitem(object value, void * data, void * arr):             # <<<<<<<<<<<<<<
 *     cdef int * new_data
 * 
 */

static int __pyx_f_4rect_6dtypes_pyxd_int_setitem(PyObject *__pyx_v_value, void *__pyx_v_data, CYTHON_UNUSED void *__pyx_v_arr) {
  int *__pyx_v_new_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_setitem", 0);

  /* "rect/dtypes.pyx":58
 *     cdef int * new_data
 * 
 *     if isinstance(value, int):             # <<<<<<<<<<<<<<
 * 
 *         new_data = mk_int.renew(data)
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_value); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rect/dtypes.pyx":60
 *     if isinstance(value, int):
 * 
 *         new_data = mk_int.renew(data)             # <<<<<<<<<<<<<<
 *         new_data[0] = <int> value
 *         return 0
 */
    try {
      __pyx_t_3 = __pyx_v_4rect_6dtypes_mk_int.renew(__pyx_v_data);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_new_data = __pyx_t_3;

    /* "rect/dtypes.pyx":61
 * 
 *         new_data = mk_int.renew(data)
 *         new_data[0] = <int> value             # <<<<<<<<<<<<<<
 *         return 0
 *     else:
 */
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_new_data[0]) = ((int)__pyx_t_4);

    /* "rect/dtypes.pyx":62
 *         new_data = mk_int.renew(data)
 *         new_data[0] = <int> value
 *         return 0             # <<<<<<<<<<<<<<
 *     else:
 *         return -1
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rect/dtypes.pyx":64
 *         return 0
 *     else:
 *         return -1             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_int_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):
 */
    __pyx_r = -1;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_int_setitem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":66
 *         return -1
 * 
 * cdef void pyxd_int_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp i
 *     cdef char * a
 */

static void __pyx_f_4rect_6dtypes_pyxd_int_copyswapn(void *__pyx_v_dest, npy_intp __pyx_v_dstride, void *__pyx_v_src, npy_intp __pyx_v_sstride, npy_intp __pyx_v_n, int __pyx_v_swap, CYTHON_UNUSED void *__pyx_v_arr) {
  CYTHON_UNUSED npy_intp __pyx_v_i;
  char *__pyx_v_a;
  char *__pyx_v_b;
  char __pyx_v_c;
  CYTHON_UNUSED int __pyx_v_j;
  int __pyx_v_m;
  int *__pyx_v_new_dest;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int *__pyx_t_4;
  npy_intp __pyx_t_5;
  npy_intp __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_copyswapn", 0);

  /* "rect/dtypes.pyx":70
 *     cdef char * a
 *     cdef char * b
 *     cdef char c = 0             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef int m
 */
  __pyx_v_c = 0;

  /* "rect/dtypes.pyx":75
 *     cdef int * new_dest
 * 
 *     if src != NULL:             # <<<<<<<<<<<<<<
 *         if (sstride == sizeof(int) and dstride == sizeof(int)):
 *             new_dest = mk_int.renew(dest)
 */
  __pyx_t_1 = ((__pyx_v_src != NULL) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":76
 * 
 *     if src != NULL:
 *         if (sstride == sizeof(int) and dstride == sizeof(int)):             # <<<<<<<<<<<<<<
 *             new_dest = mk_int.renew(dest)
 *             new_dest[0] = deref(<int *> src)
 */
    __pyx_t_1 = ((__pyx_v_sstride == (sizeof(int))) != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = ((__pyx_v_dstride == (sizeof(int))) != 0);
      __pyx_t_3 = __pyx_t_2;
    } else {
      __pyx_t_3 = __pyx_t_1;
    }
    if (__pyx_t_3) {

      /* "rect/dtypes.pyx":77
 *     if src != NULL:
 *         if (sstride == sizeof(int) and dstride == sizeof(int)):
 *             new_dest = mk_int.renew(dest)             # <<<<<<<<<<<<<<
 *             new_dest[0] = deref(<int *> src)
 *         else:
 */
      try {
        __pyx_t_4 = __pyx_v_4rect_6dtypes_mk_int.renew(__pyx_v_dest);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_new_dest = __pyx_t_4;

      /* "rect/dtypes.pyx":78
 *         if (sstride == sizeof(int) and dstride == sizeof(int)):
 *             new_dest = mk_int.renew(dest)
 *             new_dest[0] = deref(<int *> src)             # <<<<<<<<<<<<<<
 *         else:
 *             a = <char *> dest
 */
      (__pyx_v_new_dest[0]) = (*((int *)__pyx_v_src));
      goto __pyx_L4;
    }
    /*else*/ {

      /* "rect/dtypes.pyx":80
 *             new_dest[0] = deref(<int *> src)
 *         else:
 *             a = <char *> dest             # <<<<<<<<<<<<<<
 *             b = <char *> src
 *             for i in range(n):
 */
      __pyx_v_a = ((char *)__pyx_v_dest);

      /* "rect/dtypes.pyx":81
 *         else:
 *             a = <char *> dest
 *             b = <char *> src             # <<<<<<<<<<<<<<
 *             for i in range(n):
 *                 new_dest = mk_int.renew(<void *> a)
 */
      __pyx_v_b = ((char *)__pyx_v_src);

      /* "rect/dtypes.pyx":82
 *             a = <char *> dest
 *             b = <char *> src
 *             for i in range(n):             # <<<<<<<<<<<<<<
 *                 new_dest = mk_int.renew(<void *> a)
 *                 new_dest[0] = deref(<int *> b)
 */
      __pyx_t_5 = __pyx_v_n;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "rect/dtypes.pyx":83
 *             b = <char *> src
 *             for i in range(n):
 *                 new_dest = mk_int.renew(<void *> a)             # <<<<<<<<<<<<<<
 *                 new_dest[0] = deref(<int *> b)
 *                 a += dstride
 */
        try {
          __pyx_t_4 = __pyx_v_4rect_6dtypes_mk_int.renew(((void *)__pyx_v_a));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_new_dest = __pyx_t_4;

        /* "rect/dtypes.pyx":84
 *             for i in range(n):
 *                 new_dest = mk_int.renew(<void *> a)
 *                 new_dest[0] = deref(<int *> b)             # <<<<<<<<<<<<<<
 *                 a += dstride
 *                 b += sstride
 */
        (__pyx_v_new_dest[0]) = (*((int *)__pyx_v_b));

        /* "rect/dtypes.pyx":85
 *                 new_dest = mk_int.renew(<void *> a)
 *                 new_dest[0] = deref(<int *> b)
 *                 a += dstride             # <<<<<<<<<<<<<<
 *                 b += sstride
 *     if swap:
 */
        __pyx_v_a = (__pyx_v_a + __pyx_v_dstride);

        /* "rect/dtypes.pyx":86
 *                 new_dest[0] = deref(<int *> b)
 *                 a += dstride
 *                 b += sstride             # <<<<<<<<<<<<<<
 *     if swap:
 *         m = sizeof(int) / 2
 */
        __pyx_v_b = (__pyx_v_b + __pyx_v_sstride);
      }
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "rect/dtypes.pyx":87
 *                 a += dstride
 *                 b += sstride
 *     if swap:             # <<<<<<<<<<<<<<
 *         m = sizeof(int) / 2
 *         a = <char *> dest
 */
  __pyx_t_3 = (__pyx_v_swap != 0);
  if (__pyx_t_3) {

    /* "rect/dtypes.pyx":88
 *                 b += sstride
 *     if swap:
 *         m = sizeof(int) / 2             # <<<<<<<<<<<<<<
 *         a = <char *> dest
 *         for i in range(n, 0, -1):
 */
    __pyx_v_m = ((sizeof(int)) / 2);

    /* "rect/dtypes.pyx":89
 *     if swap:
 *         m = sizeof(int) / 2
 *         a = <char *> dest             # <<<<<<<<<<<<<<
 *         for i in range(n, 0, -1):
 *             b = a + (sizeof(int) - 1);
 */
    __pyx_v_a = ((char *)__pyx_v_dest);

    /* "rect/dtypes.pyx":90
 *         m = sizeof(int) / 2
 *         a = <char *> dest
 *         for i in range(n, 0, -1):             # <<<<<<<<<<<<<<
 *             b = a + (sizeof(int) - 1);
 *             for j in range(m):
 */
    for (__pyx_t_5 = __pyx_v_n; __pyx_t_5 > 0; __pyx_t_5-=1) {
      __pyx_v_i = __pyx_t_5;

      /* "rect/dtypes.pyx":91
 *         a = <char *> dest
 *         for i in range(n, 0, -1):
 *             b = a + (sizeof(int) - 1);             # <<<<<<<<<<<<<<
 *             for j in range(m):
 *                 c = a[0]
 */
      __pyx_v_b = (__pyx_v_a + ((sizeof(int)) - 1));

      /* "rect/dtypes.pyx":92
 *         for i in range(n, 0, -1):
 *             b = a + (sizeof(int) - 1);
 *             for j in range(m):             # <<<<<<<<<<<<<<
 *                 c = a[0]
 *                 a[0] = b[0]
 */
      __pyx_t_7 = __pyx_v_m;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "rect/dtypes.pyx":93
 *             b = a + (sizeof(int) - 1);
 *             for j in range(m):
 *                 c = a[0]             # <<<<<<<<<<<<<<
 *                 a[0] = b[0]
 *                 a += 1
 */
        __pyx_v_c = (__pyx_v_a[0]);

        /* "rect/dtypes.pyx":94
 *             for j in range(m):
 *                 c = a[0]
 *                 a[0] = b[0]             # <<<<<<<<<<<<<<
 *                 a += 1
 *                 b[0] = c
 */
        (__pyx_v_a[0]) = (__pyx_v_b[0]);

        /* "rect/dtypes.pyx":95
 *                 c = a[0]
 *                 a[0] = b[0]
 *                 a += 1             # <<<<<<<<<<<<<<
 *                 b[0] = c
 *                 b -= 1
 */
        __pyx_v_a = (__pyx_v_a + 1);

        /* "rect/dtypes.pyx":96
 *                 a[0] = b[0]
 *                 a += 1
 *                 b[0] = c             # <<<<<<<<<<<<<<
 *                 b -= 1
 *             a += dstride - m
 */
        (__pyx_v_b[0]) = __pyx_v_c;

        /* "rect/dtypes.pyx":97
 *                 a += 1
 *                 b[0] = c
 *                 b -= 1             # <<<<<<<<<<<<<<
 *             a += dstride - m
 * 
 */
        __pyx_v_b = (__pyx_v_b - 1);
      }

      /* "rect/dtypes.pyx":98
 *                 b[0] = c
 *                 b -= 1
 *             a += dstride - m             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_int_copyswap(void * dest, void * src, int swap, void * arr):
 */
      __pyx_v_a = (__pyx_v_a + (__pyx_v_dstride - __pyx_v_m));
    }
    goto __pyx_L7;
  }
  __pyx_L7:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_int_copyswapn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":100
 *             a += dstride - m
 * 
 * cdef void pyxd_int_copyswap(void * dest, void * src, int swap, void * arr):             # <<<<<<<<<<<<<<
 *     cdef char * a
 *     cdef char * b
 */

static void __pyx_f_4rect_6dtypes_pyxd_int_copyswap(void *__pyx_v_dest, void *__pyx_v_src, int __pyx_v_swap, CYTHON_UNUSED void *__pyx_v_arr) {
  char *__pyx_v_a;
  char *__pyx_v_b;
  char __pyx_v_c;
  CYTHON_UNUSED int __pyx_v_j;
  int __pyx_v_m;
  int *__pyx_v_new_dest;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_copyswap", 0);

  /* "rect/dtypes.pyx":103
 *     cdef char * a
 *     cdef char * b
 *     cdef char c = 0             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef int m
 */
  __pyx_v_c = 0;

  /* "rect/dtypes.pyx":107
 *     cdef int m
 *     cdef int * new_dest
 *     if src != NULL:             # <<<<<<<<<<<<<<
 *         new_dest = mk_int.renew(dest)
 *         new_dest[0] = (<int *> src)[0]
 */
  __pyx_t_1 = ((__pyx_v_src != NULL) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":108
 *     cdef int * new_dest
 *     if src != NULL:
 *         new_dest = mk_int.renew(dest)             # <<<<<<<<<<<<<<
 *         new_dest[0] = (<int *> src)[0]
 *     if swap:
 */
    try {
      __pyx_t_2 = __pyx_v_4rect_6dtypes_mk_int.renew(__pyx_v_dest);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_new_dest = __pyx_t_2;

    /* "rect/dtypes.pyx":109
 *     if src != NULL:
 *         new_dest = mk_int.renew(dest)
 *         new_dest[0] = (<int *> src)[0]             # <<<<<<<<<<<<<<
 *     if swap:
 *         m = sizeof(int) / 2
 */
    (__pyx_v_new_dest[0]) = (((int *)__pyx_v_src)[0]);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "rect/dtypes.pyx":110
 *         new_dest = mk_int.renew(dest)
 *         new_dest[0] = (<int *> src)[0]
 *     if swap:             # <<<<<<<<<<<<<<
 *         m = sizeof(int) / 2
 *         a = <char *> dest
 */
  __pyx_t_1 = (__pyx_v_swap != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":111
 *         new_dest[0] = (<int *> src)[0]
 *     if swap:
 *         m = sizeof(int) / 2             # <<<<<<<<<<<<<<
 *         a = <char *> dest
 *         b = a + (sizeof(int) - 1);
 */
    __pyx_v_m = ((sizeof(int)) / 2);

    /* "rect/dtypes.pyx":112
 *     if swap:
 *         m = sizeof(int) / 2
 *         a = <char *> dest             # <<<<<<<<<<<<<<
 *         b = a + (sizeof(int) - 1);
 *         for j in range(m):
 */
    __pyx_v_a = ((char *)__pyx_v_dest);

    /* "rect/dtypes.pyx":113
 *         m = sizeof(int) / 2
 *         a = <char *> dest
 *         b = a + (sizeof(int) - 1);             # <<<<<<<<<<<<<<
 *         for j in range(m):
 *             c = a[0]
 */
    __pyx_v_b = (__pyx_v_a + ((sizeof(int)) - 1));

    /* "rect/dtypes.pyx":114
 *         a = <char *> dest
 *         b = a + (sizeof(int) - 1);
 *         for j in range(m):             # <<<<<<<<<<<<<<
 *             c = a[0]
 *             a[0] = b[0]
 */
    __pyx_t_3 = __pyx_v_m;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "rect/dtypes.pyx":115
 *         b = a + (sizeof(int) - 1);
 *         for j in range(m):
 *             c = a[0]             # <<<<<<<<<<<<<<
 *             a[0] = b[0]
 *             a += 1
 */
      __pyx_v_c = (__pyx_v_a[0]);

      /* "rect/dtypes.pyx":116
 *         for j in range(m):
 *             c = a[0]
 *             a[0] = b[0]             # <<<<<<<<<<<<<<
 *             a += 1
 *             b[0] = c
 */
      (__pyx_v_a[0]) = (__pyx_v_b[0]);

      /* "rect/dtypes.pyx":117
 *             c = a[0]
 *             a[0] = b[0]
 *             a += 1             # <<<<<<<<<<<<<<
 *             b[0] = c
 *             b -= 1
 */
      __pyx_v_a = (__pyx_v_a + 1);

      /* "rect/dtypes.pyx":118
 *             a[0] = b[0]
 *             a += 1
 *             b[0] = c             # <<<<<<<<<<<<<<
 *             b -= 1
 * 
 */
      (__pyx_v_b[0]) = __pyx_v_c;

      /* "rect/dtypes.pyx":119
 *             a += 1
 *             b[0] = c
 *             b -= 1             # <<<<<<<<<<<<<<
 * 
 * cdef np.npy_bool pyxd_int_nonzero(void * data, void * arr):
 */
      __pyx_v_b = (__pyx_v_b - 1);
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_int_copyswap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":121
 *             b -= 1
 * 
 * cdef np.npy_bool pyxd_int_nonzero(void * data, void * arr):             # <<<<<<<<<<<<<<
 *     return (data != NULL)
 *     # FIXME comparisons not defined for arbitrary types
 */

static npy_bool __pyx_f_4rect_6dtypes_pyxd_int_nonzero(void *__pyx_v_data, CYTHON_UNUSED void *__pyx_v_arr) {
  npy_bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyxd_int_nonzero", 0);

  /* "rect/dtypes.pyx":122
 * 
 * cdef np.npy_bool pyxd_int_nonzero(void * data, void * arr):
 *     return (data != NULL)             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #cdef int zero = int()
 */
  __pyx_r = (__pyx_v_data != NULL);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":127
 *     #return ((<int *> data)[0] != zero)
 * 
 * cdef int pyxd_int_compare(const void * d1, const void * d2, void * arr):             # <<<<<<<<<<<<<<
 *     return (d1 == d2) - 1
 *     # FIXME comparisons not defined for arbitrary types
 */

static int __pyx_f_4rect_6dtypes_pyxd_int_compare(void const *__pyx_v_d1, void const *__pyx_v_d2, CYTHON_UNUSED void *__pyx_v_arr) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyxd_int_compare", 0);

  /* "rect/dtypes.pyx":128
 * 
 * cdef int pyxd_int_compare(const void * d1, const void * d2, void * arr):
 *     return (d1 == d2) - 1             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #if deref(<int *> d1) == deref(<int *> d2):
 */
  __pyx_r = ((__pyx_v_d1 == __pyx_v_d2) - 1);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":144
 * PyXD_Int_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_int_compare)
 * 
 * cdef object pyxd_int_type_alloc(PyTypeObject * self, Py_ssize_t nitems):             # <<<<<<<<<<<<<<
 *     cdef PyXDInt_Type * cval
 *     cdef object pyval
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_alloc(PyTypeObject *__pyx_v_self, CYTHON_UNUSED Py_ssize_t __pyx_v_nitems) {
  __pyx_t_4rect_6dtypes_PyXDInt_Type *__pyx_v_cval;
  PyObject *__pyx_v_pyval = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_4rect_6dtypes_PyXDInt_Type *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_type_alloc", 0);

  /* "rect/dtypes.pyx":147
 *     cdef PyXDInt_Type * cval
 *     cdef object pyval
 *     cval = mk_int_type.defnew()             # <<<<<<<<<<<<<<
 *     cval.ob_typ = self
 *     pyval = <object> cval
 */
  try {
    __pyx_t_1 = __pyx_v_4rect_6dtypes_mk_int_type.defnew();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_cval = __pyx_t_1;

  /* "rect/dtypes.pyx":148
 *     cdef object pyval
 *     cval = mk_int_type.defnew()
 *     cval.ob_typ = self             # <<<<<<<<<<<<<<
 *     pyval = <object> cval
 *     return pyval
 */
  __pyx_v_cval->ob_typ = __pyx_v_self;

  /* "rect/dtypes.pyx":149
 *     cval = mk_int_type.defnew()
 *     cval.ob_typ = self
 *     pyval = <object> cval             # <<<<<<<<<<<<<<
 *     return pyval
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_cval));
  __pyx_v_pyval = ((PyObject *)__pyx_v_cval);

  /* "rect/dtypes.pyx":150
 *     cval.ob_typ = self
 *     pyval = <object> cval
 *     return pyval             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_int_type_dealloc(object self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyval);
  __pyx_r = __pyx_v_pyval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rect.dtypes.pyxd_int_type_alloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":152
 *     return pyval
 * 
 * cdef void pyxd_int_type_dealloc(object self):             # <<<<<<<<<<<<<<
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self
 *     mk_int_type.deall(cself)
 */

static void __pyx_f_4rect_6dtypes_pyxd_int_type_dealloc(PyObject *__pyx_v_self) {
  __pyx_t_4rect_6dtypes_PyXDInt_Type *__pyx_v_cself;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_type_dealloc", 0);

  /* "rect/dtypes.pyx":153
 * 
 * cdef void pyxd_int_type_dealloc(object self):
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self             # <<<<<<<<<<<<<<
 *     mk_int_type.deall(cself)
 *     return
 */
  __pyx_v_cself = ((__pyx_t_4rect_6dtypes_PyXDInt_Type *)__pyx_v_self);

  /* "rect/dtypes.pyx":154
 * cdef void pyxd_int_type_dealloc(object self):
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self
 *     mk_int_type.deall(cself)             # <<<<<<<<<<<<<<
 *     return
 * 
 */
  try {
    __pyx_v_4rect_6dtypes_mk_int_type.deall(__pyx_v_cself);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "rect/dtypes.pyx":155
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self
 *     mk_int_type.deall(cself)
 *     return             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_int_type_new(PyTypeObject * subtype, object args, object kwds):
 */
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_int_type_dealloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":157
 *     return
 * 
 * cdef object pyxd_int_type_new(PyTypeObject * subtype, object args, object kwds):             # <<<<<<<<<<<<<<
 *     return pyxd_int_type_alloc(subtype, 0)
 * 
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_new(PyTypeObject *__pyx_v_subtype, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_type_new", 0);

  /* "rect/dtypes.pyx":158
 * 
 * cdef object pyxd_int_type_new(PyTypeObject * subtype, object args, object kwds):
 *     return pyxd_int_type_alloc(subtype, 0)             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_int_type_free(void * self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4rect_6dtypes_pyxd_int_type_alloc(__pyx_v_subtype, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rect.dtypes.pyxd_int_type_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":160
 *     return pyxd_int_type_alloc(subtype, 0)
 * 
 * cdef void pyxd_int_type_free(void * self):             # <<<<<<<<<<<<<<
 *     return
 * 
 */

static void __pyx_f_4rect_6dtypes_pyxd_int_type_free(CYTHON_UNUSED void *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyxd_int_type_free", 0);

  /* "rect/dtypes.pyx":161
 * 
 * cdef void pyxd_int_type_free(void * self):
 *     return             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_int_type_str(object self):
 */
  goto __pyx_L0;

  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":163
 *     return
 * 
 * cdef object pyxd_int_type_str(object self):             # <<<<<<<<<<<<<<
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self
 * 
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_str(PyObject *__pyx_v_self) {
  __pyx_t_4rect_6dtypes_PyXDInt_Type *__pyx_v_cself;
  PyObject *__pyx_v_pyval = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_type_str", 0);

  /* "rect/dtypes.pyx":164
 * 
 * cdef object pyxd_int_type_str(object self):
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_cself = ((__pyx_t_4rect_6dtypes_PyXDInt_Type *)__pyx_v_self);

  /* "rect/dtypes.pyx":167
 * 
 * 
 *     pyval = int((cself.obval))             # <<<<<<<<<<<<<<
 *     s = str(pyval)
 *     return s
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_cself->obval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_pyval = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":168
 * 
 *     pyval = int((cself.obval))
 *     s = str(pyval)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_pyval);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pyval);
  __Pyx_GIVEREF(__pyx_v_pyval);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "rect/dtypes.pyx":169
 *     pyval = int((cself.obval))
 *     s = str(pyval)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_int_type_repr(object self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rect.dtypes.pyxd_int_type_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyval);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":171
 *     return s
 * 
 * cdef object pyxd_int_type_repr(object self):             # <<<<<<<<<<<<<<
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self
 * 
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_repr(PyObject *__pyx_v_self) {
  __pyx_t_4rect_6dtypes_PyXDInt_Type *__pyx_v_cself;
  PyObject *__pyx_v_pyval = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_type_repr", 0);

  /* "rect/dtypes.pyx":172
 * 
 * cdef object pyxd_int_type_repr(object self):
 *     cdef PyXDInt_Type * cself = <PyXDInt_Type *> self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_cself = ((__pyx_t_4rect_6dtypes_PyXDInt_Type *)__pyx_v_self);

  /* "rect/dtypes.pyx":175
 * 
 * 
 *     pyval = int((cself.obval))             # <<<<<<<<<<<<<<
 *     s = repr(pyval)
 *     return s
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_cself->obval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_pyval = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":176
 * 
 *     pyval = int((cself.obval))
 *     s = repr(pyval)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
  __pyx_t_1 = PyObject_Repr(__pyx_v_pyval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":177
 *     pyval = int((cself.obval))
 *     s = repr(pyval)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef int pyxd_int_type_compare(object a, object b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rect.dtypes.pyxd_int_type_repr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyval);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":179
 *     return s
 * 
 * cdef int pyxd_int_type_compare(object a, object b):             # <<<<<<<<<<<<<<
 *     return (a is b) - 1
 *     # FIXME comparisons not defined for arbitrary types
 */

static int __pyx_f_4rect_6dtypes_pyxd_int_type_compare(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pyxd_int_type_compare", 0);

  /* "rect/dtypes.pyx":180
 * 
 * cdef int pyxd_int_type_compare(object a, object b):
 *     return (a is b) - 1             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #cdef PyXDInt_Type * x
 */
  __pyx_t_1 = (__pyx_v_a == __pyx_v_b);
  __pyx_r = (__pyx_t_1 - 1);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":197
 *     #    raise NotImplementedError
 * 
 * cdef object pyxd_int_type_richcompare(object a, object b, int op):             # <<<<<<<<<<<<<<
 *     if op == Py_EQ:
 *         return (a is b)
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_int_type_richcompare(PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_type_richcompare", 0);

  /* "rect/dtypes.pyx":198
 * 
 * cdef object pyxd_int_type_richcompare(object a, object b, int op):
 *     if op == Py_EQ:             # <<<<<<<<<<<<<<
 *         return (a is b)
 *     elif op == Py_NE:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":199
 * cdef object pyxd_int_type_richcompare(object a, object b, int op):
 *     if op == Py_EQ:
 *         return (a is b)             # <<<<<<<<<<<<<<
 *     elif op == Py_NE:
 *         return (a is not b)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = (__pyx_v_a == __pyx_v_b);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }

  /* "rect/dtypes.pyx":200
 *     if op == Py_EQ:
 *         return (a is b)
 *     elif op == Py_NE:             # <<<<<<<<<<<<<<
 *         return (a is not b)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_NE) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":201
 *         return (a is b)
 *     elif op == Py_NE:
 *         return (a is not b)             # <<<<<<<<<<<<<<
 *     else:
 *         return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = (__pyx_v_a != __pyx_v_b);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rect/dtypes.pyx":203
 *         return (a is not b)
 *     else:
 *         return NotImplemented             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #cdef PyXDInt_Type * x
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rect.dtypes.pyxd_int_type_richcompare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":226
 *     #    return NotImplemented
 * 
 * cdef long pyxd_int_type_hash(object self):             # <<<<<<<<<<<<<<
 *     return id(self)
 * 
 */

static long __pyx_f_4rect_6dtypes_pyxd_int_type_hash(PyObject *__pyx_v_self) {
  long __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_int_type_hash", 0);

  /* "rect/dtypes.pyx":227
 * 
 * cdef long pyxd_int_type_hash(object self):
 *     return id(self)             # <<<<<<<<<<<<<<
 * 
 * cdef PyMemberDef pyxd_int_type_members[1]
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(__pyx_builtin_id, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsLong(__pyx_t_2); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_int_type_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":290
 * cdef MemoryKnight[PyXDRectangle_Type] mk_rectangle_type = MemoryKnight[PyXDRectangle_Type]()
 * 
 * cdef object pyxd_rectangle_getitem(void * data, void * arr):             # <<<<<<<<<<<<<<
 *     cdef rectangle.Rectangle data_proxy
 *     data_proxy = rectangle.Rectangle()
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_getitem(void *__pyx_v_data, CYTHON_UNUSED void *__pyx_v_arr) {
  struct __pyx_obj_4rect_9rectangle_Rectangle *__pyx_v_data_proxy = 0;
  struct __pyx_obj_4rect_9rectangle_Rectangle *__pyx_v_pyval = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_getitem", 0);

  /* "rect/dtypes.pyx":292
 * cdef object pyxd_rectangle_getitem(void * data, void * arr):
 *     cdef rectangle.Rectangle data_proxy
 *     data_proxy = rectangle.Rectangle()             # <<<<<<<<<<<<<<
 *     (<cpp_rectangle.Rectangle *> data_proxy._inst)[0] = (<cpp_rectangle.Rectangle *> data)[0]
 *     pyval = data_proxy
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4rect_9rectangle_Rectangle)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data_proxy = ((struct __pyx_obj_4rect_9rectangle_Rectangle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":293
 *     cdef rectangle.Rectangle data_proxy
 *     data_proxy = rectangle.Rectangle()
 *     (<cpp_rectangle.Rectangle *> data_proxy._inst)[0] = (<cpp_rectangle.Rectangle *> data)[0]             # <<<<<<<<<<<<<<
 *     pyval = data_proxy
 *     return pyval
 */
  (((shapes::Rectangle *)__pyx_v_data_proxy->_inst)[0]) = (((shapes::Rectangle *)__pyx_v_data)[0]);

  /* "rect/dtypes.pyx":294
 *     data_proxy = rectangle.Rectangle()
 *     (<cpp_rectangle.Rectangle *> data_proxy._inst)[0] = (<cpp_rectangle.Rectangle *> data)[0]
 *     pyval = data_proxy             # <<<<<<<<<<<<<<
 *     return pyval
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_data_proxy));
  __pyx_v_pyval = __pyx_v_data_proxy;

  /* "rect/dtypes.pyx":295
 *     (<cpp_rectangle.Rectangle *> data_proxy._inst)[0] = (<cpp_rectangle.Rectangle *> data)[0]
 *     pyval = data_proxy
 *     return pyval             # <<<<<<<<<<<<<<
 * 
 * cdef int pyxd_rectangle_setitem(object value, void * data, void * arr):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyval));
  __pyx_r = ((PyObject *)__pyx_v_pyval);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rect.dtypes.pyxd_rectangle_getitem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data_proxy);
  __Pyx_XDECREF((PyObject *)__pyx_v_pyval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":297
 *     return pyval
 * 
 * cdef int pyxd_rectangle_setitem(object value, void * data, void * arr):             # <<<<<<<<<<<<<<
 *     cdef cpp_rectangle.Rectangle * new_data
 *     cdef rectangle.Rectangle value_proxy
 */

static int __pyx_f_4rect_6dtypes_pyxd_rectangle_setitem(PyObject *__pyx_v_value, void *__pyx_v_data, CYTHON_UNUSED void *__pyx_v_arr) {
  shapes::Rectangle *__pyx_v_new_data;
  struct __pyx_obj_4rect_9rectangle_Rectangle *__pyx_v_value_proxy = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  shapes::Rectangle *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_setitem", 0);

  /* "rect/dtypes.pyx":300
 *     cdef cpp_rectangle.Rectangle * new_data
 *     cdef rectangle.Rectangle value_proxy
 *     if isinstance(value, rectangle.Rectangle):             # <<<<<<<<<<<<<<
 *         value_proxy = <rectangle.Rectangle> value
 *         new_data = mk_rectangle.renew(data)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, ((PyObject*)__pyx_ptype_4rect_9rectangle_Rectangle)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rect/dtypes.pyx":301
 *     cdef rectangle.Rectangle value_proxy
 *     if isinstance(value, rectangle.Rectangle):
 *         value_proxy = <rectangle.Rectangle> value             # <<<<<<<<<<<<<<
 *         new_data = mk_rectangle.renew(data)
 *         new_data[0] = (<cpp_rectangle.Rectangle *> value_proxy._inst)[0]
 */
    __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4rect_9rectangle_Rectangle *)__pyx_v_value)));
    __pyx_v_value_proxy = ((struct __pyx_obj_4rect_9rectangle_Rectangle *)__pyx_v_value);

    /* "rect/dtypes.pyx":302
 *     if isinstance(value, rectangle.Rectangle):
 *         value_proxy = <rectangle.Rectangle> value
 *         new_data = mk_rectangle.renew(data)             # <<<<<<<<<<<<<<
 *         new_data[0] = (<cpp_rectangle.Rectangle *> value_proxy._inst)[0]
 *         return 0
 */
    try {
      __pyx_t_3 = __pyx_v_4rect_6dtypes_mk_rectangle.renew(__pyx_v_data);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_new_data = __pyx_t_3;

    /* "rect/dtypes.pyx":303
 *         value_proxy = <rectangle.Rectangle> value
 *         new_data = mk_rectangle.renew(data)
 *         new_data[0] = (<cpp_rectangle.Rectangle *> value_proxy._inst)[0]             # <<<<<<<<<<<<<<
 *         return 0
 *     else:
 */
    (__pyx_v_new_data[0]) = (((shapes::Rectangle *)__pyx_v_value_proxy->_inst)[0]);

    /* "rect/dtypes.pyx":304
 *         new_data = mk_rectangle.renew(data)
 *         new_data[0] = (<cpp_rectangle.Rectangle *> value_proxy._inst)[0]
 *         return 0             # <<<<<<<<<<<<<<
 *     else:
 *         return -1
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rect/dtypes.pyx":306
 *         return 0
 *     else:
 *         return -1             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_rectangle_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):
 */
    __pyx_r = -1;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_rectangle_setitem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value_proxy);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":308
 *         return -1
 * 
 * cdef void pyxd_rectangle_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp i
 *     cdef char * a
 */

static void __pyx_f_4rect_6dtypes_pyxd_rectangle_copyswapn(void *__pyx_v_dest, npy_intp __pyx_v_dstride, void *__pyx_v_src, npy_intp __pyx_v_sstride, npy_intp __pyx_v_n, int __pyx_v_swap, CYTHON_UNUSED void *__pyx_v_arr) {
  CYTHON_UNUSED npy_intp __pyx_v_i;
  char *__pyx_v_a;
  char *__pyx_v_b;
  char __pyx_v_c;
  CYTHON_UNUSED int __pyx_v_j;
  int __pyx_v_m;
  shapes::Rectangle *__pyx_v_new_dest;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  shapes::Rectangle *__pyx_t_4;
  npy_intp __pyx_t_5;
  npy_intp __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_copyswapn", 0);

  /* "rect/dtypes.pyx":312
 *     cdef char * a
 *     cdef char * b
 *     cdef char c = 0             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef int m
 */
  __pyx_v_c = 0;

  /* "rect/dtypes.pyx":317
 *     cdef cpp_rectangle.Rectangle * new_dest
 * 
 *     if src != NULL:             # <<<<<<<<<<<<<<
 *         if (sstride == sizeof(cpp_rectangle.Rectangle) and dstride == sizeof(cpp_rectangle.Rectangle)):
 *             new_dest = mk_rectangle.renew(dest)
 */
  __pyx_t_1 = ((__pyx_v_src != NULL) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":318
 * 
 *     if src != NULL:
 *         if (sstride == sizeof(cpp_rectangle.Rectangle) and dstride == sizeof(cpp_rectangle.Rectangle)):             # <<<<<<<<<<<<<<
 *             new_dest = mk_rectangle.renew(dest)
 *             new_dest[0] = deref(<cpp_rectangle.Rectangle *> src)
 */
    __pyx_t_1 = ((__pyx_v_sstride == (sizeof(shapes::Rectangle))) != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = ((__pyx_v_dstride == (sizeof(shapes::Rectangle))) != 0);
      __pyx_t_3 = __pyx_t_2;
    } else {
      __pyx_t_3 = __pyx_t_1;
    }
    if (__pyx_t_3) {

      /* "rect/dtypes.pyx":319
 *     if src != NULL:
 *         if (sstride == sizeof(cpp_rectangle.Rectangle) and dstride == sizeof(cpp_rectangle.Rectangle)):
 *             new_dest = mk_rectangle.renew(dest)             # <<<<<<<<<<<<<<
 *             new_dest[0] = deref(<cpp_rectangle.Rectangle *> src)
 *         else:
 */
      try {
        __pyx_t_4 = __pyx_v_4rect_6dtypes_mk_rectangle.renew(__pyx_v_dest);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_new_dest = __pyx_t_4;

      /* "rect/dtypes.pyx":320
 *         if (sstride == sizeof(cpp_rectangle.Rectangle) and dstride == sizeof(cpp_rectangle.Rectangle)):
 *             new_dest = mk_rectangle.renew(dest)
 *             new_dest[0] = deref(<cpp_rectangle.Rectangle *> src)             # <<<<<<<<<<<<<<
 *         else:
 *             a = <char *> dest
 */
      (__pyx_v_new_dest[0]) = (*((shapes::Rectangle *)__pyx_v_src));
      goto __pyx_L4;
    }
    /*else*/ {

      /* "rect/dtypes.pyx":322
 *             new_dest[0] = deref(<cpp_rectangle.Rectangle *> src)
 *         else:
 *             a = <char *> dest             # <<<<<<<<<<<<<<
 *             b = <char *> src
 *             for i in range(n):
 */
      __pyx_v_a = ((char *)__pyx_v_dest);

      /* "rect/dtypes.pyx":323
 *         else:
 *             a = <char *> dest
 *             b = <char *> src             # <<<<<<<<<<<<<<
 *             for i in range(n):
 *                 new_dest = mk_rectangle.renew(<void *> a)
 */
      __pyx_v_b = ((char *)__pyx_v_src);

      /* "rect/dtypes.pyx":324
 *             a = <char *> dest
 *             b = <char *> src
 *             for i in range(n):             # <<<<<<<<<<<<<<
 *                 new_dest = mk_rectangle.renew(<void *> a)
 *                 new_dest[0] = deref(<cpp_rectangle.Rectangle *> b)
 */
      __pyx_t_5 = __pyx_v_n;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "rect/dtypes.pyx":325
 *             b = <char *> src
 *             for i in range(n):
 *                 new_dest = mk_rectangle.renew(<void *> a)             # <<<<<<<<<<<<<<
 *                 new_dest[0] = deref(<cpp_rectangle.Rectangle *> b)
 *                 a += dstride
 */
        try {
          __pyx_t_4 = __pyx_v_4rect_6dtypes_mk_rectangle.renew(((void *)__pyx_v_a));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_new_dest = __pyx_t_4;

        /* "rect/dtypes.pyx":326
 *             for i in range(n):
 *                 new_dest = mk_rectangle.renew(<void *> a)
 *                 new_dest[0] = deref(<cpp_rectangle.Rectangle *> b)             # <<<<<<<<<<<<<<
 *                 a += dstride
 *                 b += sstride
 */
        (__pyx_v_new_dest[0]) = (*((shapes::Rectangle *)__pyx_v_b));

        /* "rect/dtypes.pyx":327
 *                 new_dest = mk_rectangle.renew(<void *> a)
 *                 new_dest[0] = deref(<cpp_rectangle.Rectangle *> b)
 *                 a += dstride             # <<<<<<<<<<<<<<
 *                 b += sstride
 *     if swap:
 */
        __pyx_v_a = (__pyx_v_a + __pyx_v_dstride);

        /* "rect/dtypes.pyx":328
 *                 new_dest[0] = deref(<cpp_rectangle.Rectangle *> b)
 *                 a += dstride
 *                 b += sstride             # <<<<<<<<<<<<<<
 *     if swap:
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 */
        __pyx_v_b = (__pyx_v_b + __pyx_v_sstride);
      }
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "rect/dtypes.pyx":329
 *                 a += dstride
 *                 b += sstride
 *     if swap:             # <<<<<<<<<<<<<<
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 *         a = <char *> dest
 */
  __pyx_t_3 = (__pyx_v_swap != 0);
  if (__pyx_t_3) {

    /* "rect/dtypes.pyx":330
 *                 b += sstride
 *     if swap:
 *         m = sizeof(cpp_rectangle.Rectangle) / 2             # <<<<<<<<<<<<<<
 *         a = <char *> dest
 *         for i in range(n, 0, -1):
 */
    __pyx_v_m = ((sizeof(shapes::Rectangle)) / 2);

    /* "rect/dtypes.pyx":331
 *     if swap:
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 *         a = <char *> dest             # <<<<<<<<<<<<<<
 *         for i in range(n, 0, -1):
 *             b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 */
    __pyx_v_a = ((char *)__pyx_v_dest);

    /* "rect/dtypes.pyx":332
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 *         a = <char *> dest
 *         for i in range(n, 0, -1):             # <<<<<<<<<<<<<<
 *             b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 *             for j in range(m):
 */
    for (__pyx_t_5 = __pyx_v_n; __pyx_t_5 > 0; __pyx_t_5-=1) {
      __pyx_v_i = __pyx_t_5;

      /* "rect/dtypes.pyx":333
 *         a = <char *> dest
 *         for i in range(n, 0, -1):
 *             b = a + (sizeof(cpp_rectangle.Rectangle) - 1);             # <<<<<<<<<<<<<<
 *             for j in range(m):
 *                 c = a[0]
 */
      __pyx_v_b = (__pyx_v_a + ((sizeof(shapes::Rectangle)) - 1));

      /* "rect/dtypes.pyx":334
 *         for i in range(n, 0, -1):
 *             b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 *             for j in range(m):             # <<<<<<<<<<<<<<
 *                 c = a[0]
 *                 a[0] = b[0]
 */
      __pyx_t_7 = __pyx_v_m;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "rect/dtypes.pyx":335
 *             b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 *             for j in range(m):
 *                 c = a[0]             # <<<<<<<<<<<<<<
 *                 a[0] = b[0]
 *                 a += 1
 */
        __pyx_v_c = (__pyx_v_a[0]);

        /* "rect/dtypes.pyx":336
 *             for j in range(m):
 *                 c = a[0]
 *                 a[0] = b[0]             # <<<<<<<<<<<<<<
 *                 a += 1
 *                 b[0] = c
 */
        (__pyx_v_a[0]) = (__pyx_v_b[0]);

        /* "rect/dtypes.pyx":337
 *                 c = a[0]
 *                 a[0] = b[0]
 *                 a += 1             # <<<<<<<<<<<<<<
 *                 b[0] = c
 *                 b -= 1
 */
        __pyx_v_a = (__pyx_v_a + 1);

        /* "rect/dtypes.pyx":338
 *                 a[0] = b[0]
 *                 a += 1
 *                 b[0] = c             # <<<<<<<<<<<<<<
 *                 b -= 1
 *             a += dstride - m
 */
        (__pyx_v_b[0]) = __pyx_v_c;

        /* "rect/dtypes.pyx":339
 *                 a += 1
 *                 b[0] = c
 *                 b -= 1             # <<<<<<<<<<<<<<
 *             a += dstride - m
 * 
 */
        __pyx_v_b = (__pyx_v_b - 1);
      }

      /* "rect/dtypes.pyx":340
 *                 b[0] = c
 *                 b -= 1
 *             a += dstride - m             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_rectangle_copyswap(void * dest, void * src, int swap, void * arr):
 */
      __pyx_v_a = (__pyx_v_a + (__pyx_v_dstride - __pyx_v_m));
    }
    goto __pyx_L7;
  }
  __pyx_L7:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_rectangle_copyswapn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":342
 *             a += dstride - m
 * 
 * cdef void pyxd_rectangle_copyswap(void * dest, void * src, int swap, void * arr):             # <<<<<<<<<<<<<<
 *     cdef char * a
 *     cdef char * b
 */

static void __pyx_f_4rect_6dtypes_pyxd_rectangle_copyswap(void *__pyx_v_dest, void *__pyx_v_src, int __pyx_v_swap, CYTHON_UNUSED void *__pyx_v_arr) {
  char *__pyx_v_a;
  char *__pyx_v_b;
  char __pyx_v_c;
  CYTHON_UNUSED int __pyx_v_j;
  int __pyx_v_m;
  shapes::Rectangle *__pyx_v_new_dest;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  shapes::Rectangle *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_copyswap", 0);

  /* "rect/dtypes.pyx":345
 *     cdef char * a
 *     cdef char * b
 *     cdef char c = 0             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef int m
 */
  __pyx_v_c = 0;

  /* "rect/dtypes.pyx":349
 *     cdef int m
 *     cdef cpp_rectangle.Rectangle * new_dest
 *     if src != NULL:             # <<<<<<<<<<<<<<
 *         new_dest = mk_rectangle.renew(dest)
 *         new_dest[0] = (<cpp_rectangle.Rectangle *> src)[0]
 */
  __pyx_t_1 = ((__pyx_v_src != NULL) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":350
 *     cdef cpp_rectangle.Rectangle * new_dest
 *     if src != NULL:
 *         new_dest = mk_rectangle.renew(dest)             # <<<<<<<<<<<<<<
 *         new_dest[0] = (<cpp_rectangle.Rectangle *> src)[0]
 *     if swap:
 */
    try {
      __pyx_t_2 = __pyx_v_4rect_6dtypes_mk_rectangle.renew(__pyx_v_dest);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_new_dest = __pyx_t_2;

    /* "rect/dtypes.pyx":351
 *     if src != NULL:
 *         new_dest = mk_rectangle.renew(dest)
 *         new_dest[0] = (<cpp_rectangle.Rectangle *> src)[0]             # <<<<<<<<<<<<<<
 *     if swap:
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 */
    (__pyx_v_new_dest[0]) = (((shapes::Rectangle *)__pyx_v_src)[0]);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "rect/dtypes.pyx":352
 *         new_dest = mk_rectangle.renew(dest)
 *         new_dest[0] = (<cpp_rectangle.Rectangle *> src)[0]
 *     if swap:             # <<<<<<<<<<<<<<
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 *         a = <char *> dest
 */
  __pyx_t_1 = (__pyx_v_swap != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":353
 *         new_dest[0] = (<cpp_rectangle.Rectangle *> src)[0]
 *     if swap:
 *         m = sizeof(cpp_rectangle.Rectangle) / 2             # <<<<<<<<<<<<<<
 *         a = <char *> dest
 *         b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 */
    __pyx_v_m = ((sizeof(shapes::Rectangle)) / 2);

    /* "rect/dtypes.pyx":354
 *     if swap:
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 *         a = <char *> dest             # <<<<<<<<<<<<<<
 *         b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 *         for j in range(m):
 */
    __pyx_v_a = ((char *)__pyx_v_dest);

    /* "rect/dtypes.pyx":355
 *         m = sizeof(cpp_rectangle.Rectangle) / 2
 *         a = <char *> dest
 *         b = a + (sizeof(cpp_rectangle.Rectangle) - 1);             # <<<<<<<<<<<<<<
 *         for j in range(m):
 *             c = a[0]
 */
    __pyx_v_b = (__pyx_v_a + ((sizeof(shapes::Rectangle)) - 1));

    /* "rect/dtypes.pyx":356
 *         a = <char *> dest
 *         b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 *         for j in range(m):             # <<<<<<<<<<<<<<
 *             c = a[0]
 *             a[0] = b[0]
 */
    __pyx_t_3 = __pyx_v_m;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "rect/dtypes.pyx":357
 *         b = a + (sizeof(cpp_rectangle.Rectangle) - 1);
 *         for j in range(m):
 *             c = a[0]             # <<<<<<<<<<<<<<
 *             a[0] = b[0]
 *             a += 1
 */
      __pyx_v_c = (__pyx_v_a[0]);

      /* "rect/dtypes.pyx":358
 *         for j in range(m):
 *             c = a[0]
 *             a[0] = b[0]             # <<<<<<<<<<<<<<
 *             a += 1
 *             b[0] = c
 */
      (__pyx_v_a[0]) = (__pyx_v_b[0]);

      /* "rect/dtypes.pyx":359
 *             c = a[0]
 *             a[0] = b[0]
 *             a += 1             # <<<<<<<<<<<<<<
 *             b[0] = c
 *             b -= 1
 */
      __pyx_v_a = (__pyx_v_a + 1);

      /* "rect/dtypes.pyx":360
 *             a[0] = b[0]
 *             a += 1
 *             b[0] = c             # <<<<<<<<<<<<<<
 *             b -= 1
 * 
 */
      (__pyx_v_b[0]) = __pyx_v_c;

      /* "rect/dtypes.pyx":361
 *             a += 1
 *             b[0] = c
 *             b -= 1             # <<<<<<<<<<<<<<
 * 
 * cdef np.npy_bool pyxd_rectangle_nonzero(void * data, void * arr):
 */
      __pyx_v_b = (__pyx_v_b - 1);
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_rectangle_copyswap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":363
 *             b -= 1
 * 
 * cdef np.npy_bool pyxd_rectangle_nonzero(void * data, void * arr):             # <<<<<<<<<<<<<<
 *     return (data != NULL)
 *     # FIXME comparisons not defined for arbitrary types
 */

static npy_bool __pyx_f_4rect_6dtypes_pyxd_rectangle_nonzero(void *__pyx_v_data, CYTHON_UNUSED void *__pyx_v_arr) {
  npy_bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyxd_rectangle_nonzero", 0);

  /* "rect/dtypes.pyx":364
 * 
 * cdef np.npy_bool pyxd_rectangle_nonzero(void * data, void * arr):
 *     return (data != NULL)             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #cdef cpp_rectangle.Rectangle zero = cpp_rectangle.Rectangle()
 */
  __pyx_r = (__pyx_v_data != NULL);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":369
 *     #return ((<cpp_rectangle.Rectangle *> data)[0] != zero)
 * 
 * cdef int pyxd_rectangle_compare(const void * d1, const void * d2, void * arr):             # <<<<<<<<<<<<<<
 *     return (d1 == d2) - 1
 *     # FIXME comparisons not defined for arbitrary types
 */

static int __pyx_f_4rect_6dtypes_pyxd_rectangle_compare(void const *__pyx_v_d1, void const *__pyx_v_d2, CYTHON_UNUSED void *__pyx_v_arr) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyxd_rectangle_compare", 0);

  /* "rect/dtypes.pyx":370
 * 
 * cdef int pyxd_rectangle_compare(const void * d1, const void * d2, void * arr):
 *     return (d1 == d2) - 1             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #if deref(<cpp_rectangle.Rectangle *> d1) == deref(<cpp_rectangle.Rectangle *> d2):
 */
  __pyx_r = ((__pyx_v_d1 == __pyx_v_d2) - 1);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":386
 * PyXD_Rectangle_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_rectangle_compare)
 * 
 * cdef object pyxd_rectangle_type_alloc(PyTypeObject * self, Py_ssize_t nitems):             # <<<<<<<<<<<<<<
 *     cdef PyXDRectangle_Type * cval
 *     cdef object pyval
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_alloc(PyTypeObject *__pyx_v_self, CYTHON_UNUSED Py_ssize_t __pyx_v_nitems) {
  __pyx_t_4rect_6dtypes_PyXDRectangle_Type *__pyx_v_cval;
  PyObject *__pyx_v_pyval = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_4rect_6dtypes_PyXDRectangle_Type *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_alloc", 0);

  /* "rect/dtypes.pyx":389
 *     cdef PyXDRectangle_Type * cval
 *     cdef object pyval
 *     cval = mk_rectangle_type.defnew()             # <<<<<<<<<<<<<<
 *     cval.ob_typ = self
 *     pyval = <object> cval
 */
  try {
    __pyx_t_1 = __pyx_v_4rect_6dtypes_mk_rectangle_type.defnew();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_cval = __pyx_t_1;

  /* "rect/dtypes.pyx":390
 *     cdef object pyval
 *     cval = mk_rectangle_type.defnew()
 *     cval.ob_typ = self             # <<<<<<<<<<<<<<
 *     pyval = <object> cval
 *     return pyval
 */
  __pyx_v_cval->ob_typ = __pyx_v_self;

  /* "rect/dtypes.pyx":391
 *     cval = mk_rectangle_type.defnew()
 *     cval.ob_typ = self
 *     pyval = <object> cval             # <<<<<<<<<<<<<<
 *     return pyval
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_cval));
  __pyx_v_pyval = ((PyObject *)__pyx_v_cval);

  /* "rect/dtypes.pyx":392
 *     cval.ob_typ = self
 *     pyval = <object> cval
 *     return pyval             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_rectangle_type_dealloc(object self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyval);
  __pyx_r = __pyx_v_pyval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rect.dtypes.pyxd_rectangle_type_alloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":394
 *     return pyval
 * 
 * cdef void pyxd_rectangle_type_dealloc(object self):             # <<<<<<<<<<<<<<
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self
 *     mk_rectangle_type.deall(cself)
 */

static void __pyx_f_4rect_6dtypes_pyxd_rectangle_type_dealloc(PyObject *__pyx_v_self) {
  __pyx_t_4rect_6dtypes_PyXDRectangle_Type *__pyx_v_cself;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_dealloc", 0);

  /* "rect/dtypes.pyx":395
 * 
 * cdef void pyxd_rectangle_type_dealloc(object self):
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self             # <<<<<<<<<<<<<<
 *     mk_rectangle_type.deall(cself)
 *     return
 */
  __pyx_v_cself = ((__pyx_t_4rect_6dtypes_PyXDRectangle_Type *)__pyx_v_self);

  /* "rect/dtypes.pyx":396
 * cdef void pyxd_rectangle_type_dealloc(object self):
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self
 *     mk_rectangle_type.deall(cself)             # <<<<<<<<<<<<<<
 *     return
 * 
 */
  try {
    __pyx_v_4rect_6dtypes_mk_rectangle_type.deall(__pyx_v_cself);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "rect/dtypes.pyx":397
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self
 *     mk_rectangle_type.deall(cself)
 *     return             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_rectangle_type_new(PyTypeObject * subtype, object args, object kwds):
 */
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_rectangle_type_dealloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":399
 *     return
 * 
 * cdef object pyxd_rectangle_type_new(PyTypeObject * subtype, object args, object kwds):             # <<<<<<<<<<<<<<
 *     return pyxd_rectangle_type_alloc(subtype, 0)
 * 
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_new(PyTypeObject *__pyx_v_subtype, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_new", 0);

  /* "rect/dtypes.pyx":400
 * 
 * cdef object pyxd_rectangle_type_new(PyTypeObject * subtype, object args, object kwds):
 *     return pyxd_rectangle_type_alloc(subtype, 0)             # <<<<<<<<<<<<<<
 * 
 * cdef void pyxd_rectangle_type_free(void * self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_alloc(__pyx_v_subtype, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rect.dtypes.pyxd_rectangle_type_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":402
 *     return pyxd_rectangle_type_alloc(subtype, 0)
 * 
 * cdef void pyxd_rectangle_type_free(void * self):             # <<<<<<<<<<<<<<
 *     return
 * 
 */

static void __pyx_f_4rect_6dtypes_pyxd_rectangle_type_free(CYTHON_UNUSED void *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_free", 0);

  /* "rect/dtypes.pyx":403
 * 
 * cdef void pyxd_rectangle_type_free(void * self):
 *     return             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_rectangle_type_str(object self):
 */
  goto __pyx_L0;

  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rect/dtypes.pyx":405
 *     return
 * 
 * cdef object pyxd_rectangle_type_str(object self):             # <<<<<<<<<<<<<<
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self
 *     cdef rectangle.Rectangle val_proxy
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_str(PyObject *__pyx_v_self) {
  __pyx_t_4rect_6dtypes_PyXDRectangle_Type *__pyx_v_cself;
  struct __pyx_obj_4rect_9rectangle_Rectangle *__pyx_v_val_proxy = 0;
  struct __pyx_obj_4rect_9rectangle_Rectangle *__pyx_v_pyval = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  shapes::Rectangle __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_str", 0);

  /* "rect/dtypes.pyx":406
 * 
 * cdef object pyxd_rectangle_type_str(object self):
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self             # <<<<<<<<<<<<<<
 *     cdef rectangle.Rectangle val_proxy
 *     val_proxy = rectangle.Rectangle()
 */
  __pyx_v_cself = ((__pyx_t_4rect_6dtypes_PyXDRectangle_Type *)__pyx_v_self);

  /* "rect/dtypes.pyx":408
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self
 *     cdef rectangle.Rectangle val_proxy
 *     val_proxy = rectangle.Rectangle()             # <<<<<<<<<<<<<<
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)
 *     pyval = val_proxy
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4rect_9rectangle_Rectangle)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val_proxy = ((struct __pyx_obj_4rect_9rectangle_Rectangle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":409
 *     cdef rectangle.Rectangle val_proxy
 *     val_proxy = rectangle.Rectangle()
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)             # <<<<<<<<<<<<<<
 *     pyval = val_proxy
 *     s = str(pyval)
 */
  __pyx_t_2 = __pyx_v_cself->obval;
  (((shapes::Rectangle *)__pyx_v_val_proxy->_inst)[0]) = __pyx_t_2;

  /* "rect/dtypes.pyx":410
 *     val_proxy = rectangle.Rectangle()
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)
 *     pyval = val_proxy             # <<<<<<<<<<<<<<
 *     s = str(pyval)
 *     return s
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_val_proxy));
  __pyx_v_pyval = __pyx_v_val_proxy;

  /* "rect/dtypes.pyx":411
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)
 *     pyval = val_proxy
 *     s = str(pyval)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyval));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_pyval));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_pyval));
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_s = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rect/dtypes.pyx":412
 *     pyval = val_proxy
 *     s = str(pyval)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_rectangle_type_repr(object self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rect.dtypes.pyxd_rectangle_type_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val_proxy);
  __Pyx_XDECREF((PyObject *)__pyx_v_pyval);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":414
 *     return s
 * 
 * cdef object pyxd_rectangle_type_repr(object self):             # <<<<<<<<<<<<<<
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self
 *     cdef rectangle.Rectangle val_proxy
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_repr(PyObject *__pyx_v_self) {
  __pyx_t_4rect_6dtypes_PyXDRectangle_Type *__pyx_v_cself;
  struct __pyx_obj_4rect_9rectangle_Rectangle *__pyx_v_val_proxy = 0;
  struct __pyx_obj_4rect_9rectangle_Rectangle *__pyx_v_pyval = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  shapes::Rectangle __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_repr", 0);

  /* "rect/dtypes.pyx":415
 * 
 * cdef object pyxd_rectangle_type_repr(object self):
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self             # <<<<<<<<<<<<<<
 *     cdef rectangle.Rectangle val_proxy
 *     val_proxy = rectangle.Rectangle()
 */
  __pyx_v_cself = ((__pyx_t_4rect_6dtypes_PyXDRectangle_Type *)__pyx_v_self);

  /* "rect/dtypes.pyx":417
 *     cdef PyXDRectangle_Type * cself = <PyXDRectangle_Type *> self
 *     cdef rectangle.Rectangle val_proxy
 *     val_proxy = rectangle.Rectangle()             # <<<<<<<<<<<<<<
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)
 *     pyval = val_proxy
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4rect_9rectangle_Rectangle)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val_proxy = ((struct __pyx_obj_4rect_9rectangle_Rectangle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":418
 *     cdef rectangle.Rectangle val_proxy
 *     val_proxy = rectangle.Rectangle()
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)             # <<<<<<<<<<<<<<
 *     pyval = val_proxy
 *     s = repr(pyval)
 */
  __pyx_t_2 = __pyx_v_cself->obval;
  (((shapes::Rectangle *)__pyx_v_val_proxy->_inst)[0]) = __pyx_t_2;

  /* "rect/dtypes.pyx":419
 *     val_proxy = rectangle.Rectangle()
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)
 *     pyval = val_proxy             # <<<<<<<<<<<<<<
 *     s = repr(pyval)
 *     return s
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_val_proxy));
  __pyx_v_pyval = __pyx_v_val_proxy;

  /* "rect/dtypes.pyx":420
 *     (<cpp_rectangle.Rectangle *> val_proxy._inst)[0] = (cself.obval)
 *     pyval = val_proxy
 *     s = repr(pyval)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
  __pyx_t_1 = PyObject_Repr(((PyObject *)__pyx_v_pyval)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rect/dtypes.pyx":421
 *     pyval = val_proxy
 *     s = repr(pyval)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef int pyxd_rectangle_type_compare(object a, object b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rect.dtypes.pyxd_rectangle_type_repr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val_proxy);
  __Pyx_XDECREF((PyObject *)__pyx_v_pyval);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":423
 *     return s
 * 
 * cdef int pyxd_rectangle_type_compare(object a, object b):             # <<<<<<<<<<<<<<
 *     return (a is b) - 1
 *     # FIXME comparisons not defined for arbitrary types
 */

static int __pyx_f_4rect_6dtypes_pyxd_rectangle_type_compare(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_compare", 0);

  /* "rect/dtypes.pyx":424
 * 
 * cdef int pyxd_rectangle_type_compare(object a, object b):
 *     return (a is b) - 1             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #cdef PyXDRectangle_Type * x
 */
  __pyx_t_1 = (__pyx_v_a == __pyx_v_b);
  __pyx_r = (__pyx_t_1 - 1);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":441
 *     #    raise NotImplementedError
 * 
 * cdef object pyxd_rectangle_type_richcompare(object a, object b, int op):             # <<<<<<<<<<<<<<
 *     if op == Py_EQ:
 *         return (a is b)
 */

static PyObject *__pyx_f_4rect_6dtypes_pyxd_rectangle_type_richcompare(PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_richcompare", 0);

  /* "rect/dtypes.pyx":442
 * 
 * cdef object pyxd_rectangle_type_richcompare(object a, object b, int op):
 *     if op == Py_EQ:             # <<<<<<<<<<<<<<
 *         return (a is b)
 *     elif op == Py_NE:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":443
 * cdef object pyxd_rectangle_type_richcompare(object a, object b, int op):
 *     if op == Py_EQ:
 *         return (a is b)             # <<<<<<<<<<<<<<
 *     elif op == Py_NE:
 *         return (a is not b)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = (__pyx_v_a == __pyx_v_b);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }

  /* "rect/dtypes.pyx":444
 *     if op == Py_EQ:
 *         return (a is b)
 *     elif op == Py_NE:             # <<<<<<<<<<<<<<
 *         return (a is not b)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_NE) != 0);
  if (__pyx_t_1) {

    /* "rect/dtypes.pyx":445
 *         return (a is b)
 *     elif op == Py_NE:
 *         return (a is not b)             # <<<<<<<<<<<<<<
 *     else:
 *         return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = (__pyx_v_a != __pyx_v_b);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "rect/dtypes.pyx":447
 *         return (a is not b)
 *     else:
 *         return NotImplemented             # <<<<<<<<<<<<<<
 *     # FIXME comparisons not defined for arbitrary types
 *     #cdef PyXDRectangle_Type * x
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rect.dtypes.pyxd_rectangle_type_richcompare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rect/dtypes.pyx":470
 *     #    return NotImplemented
 * 
 * cdef long pyxd_rectangle_type_hash(object self):             # <<<<<<<<<<<<<<
 *     return id(self)
 * 
 */

static long __pyx_f_4rect_6dtypes_pyxd_rectangle_type_hash(PyObject *__pyx_v_self) {
  long __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pyxd_rectangle_type_hash", 0);

  /* "rect/dtypes.pyx":471
 * 
 * cdef long pyxd_rectangle_type_hash(object self):
 *     return id(self)             # <<<<<<<<<<<<<<
 * 
 * cdef PyMemberDef pyxd_rectangle_type_members[1]
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(__pyx_builtin_id, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsLong(__pyx_t_2); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("rect.dtypes.pyxd_rectangle_type_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "numpy.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "numpy.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "numpy.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "numpy.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "numpy.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "numpy.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_1) {

    /* "numpy.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "numpy.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_3) {

    /* "numpy.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "numpy.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "numpy.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "numpy.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_2 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_2) {

    /* "numpy.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "numpy.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "numpy.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "numpy.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "numpy.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "numpy.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "numpy.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L7:;

  /* "numpy.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "numpy.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "numpy.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "numpy.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "numpy.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "numpy.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "numpy.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = ((!(__pyx_v_copy_shape != 0)) != 0);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "numpy.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "numpy.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L10:;

  /* "numpy.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "numpy.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_5 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_5;

    /* "numpy.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "numpy.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = ((__pyx_v_descr->byteorder == '<') != 0);
      if (__pyx_t_1) {
        __pyx_t_3 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "numpy.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "numpy.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k__b;
      break;

      /* "numpy.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k__B;
      break;

      /* "numpy.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k__h;
      break;

      /* "numpy.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k__H;
      break;

      /* "numpy.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k__i;
      break;

      /* "numpy.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k__I;
      break;

      /* "numpy.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k__l;
      break;

      /* "numpy.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k__L;
      break;

      /* "numpy.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k__q;
      break;

      /* "numpy.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k__Q;
      break;

      /* "numpy.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k__f;
      break;

      /* "numpy.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k__d;
      break;

      /* "numpy.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k__g;
      break;

      /* "numpy.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k__Zf;
      break;

      /* "numpy.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k__Zd;
      break;

      /* "numpy.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k__Zg;
      break;

      /* "numpy.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k__O;
      break;
      default:

      /* "numpy.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_7), __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_8));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "numpy.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "numpy.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L11;
  }
  /*else*/ {

    /* "numpy.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "numpy.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "numpy.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "numpy.pxd":285
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = c'\0' # Terminate format string
 * 
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "numpy.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }
  __pyx_L11:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));
  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "numpy.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "numpy.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "numpy.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "numpy.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "numpy.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "numpy.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "numpy.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "numpy.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "numpy.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "numpy.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(((PyObject *)__pyx_v_descr->names) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_descr->names); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "numpy.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "numpy.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */
    if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_fields)))) {
      PyObject* sequence = ((PyObject *)__pyx_v_fields);
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else if (1) {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(((PyObject *)__pyx_v_fields)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "numpy.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_15, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "numpy.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (__pyx_t_7) {
      __pyx_t_8 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_8 = __pyx_t_7;
    }
    if (!__pyx_t_8) {

      /* "numpy.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
      if (__pyx_t_7) {
        __pyx_t_9 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_10 = __pyx_t_9;
      } else {
        __pyx_t_10 = __pyx_t_7;
      }
      __pyx_t_7 = __pyx_t_10;
    } else {
      __pyx_t_7 = __pyx_t_8;
    }
    if (__pyx_t_7) {

      /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "numpy.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_7) break;

      /* "numpy.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "numpy.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "numpy.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_11 = 0;
      (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + 1);
    }

    /* "numpy.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_11 = 0;
    (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + __pyx_v_child->elsize);

    /* "numpy.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_7 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_7) {

      /* "numpy.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "numpy.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_7 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_7) {

        /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L12;
      }
      __pyx_L12:;

      /* "numpy.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L13;
      }

      /* "numpy.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L13;
      }

      /* "numpy.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L13;
      }

      /* "numpy.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L13;
      }

      /* "numpy.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L13;
      }

      /* "numpy.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L13;
      }

      /* "numpy.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L13;
      }

      /* "numpy.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L13;
      }

      /* "numpy.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L13;
      }

      /* "numpy.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L13;
      }

      /* "numpy.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L13;
      }

      /* "numpy.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_5 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L13;
      }

      /* "numpy.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L13;
      }

      /* "numpy.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L13;
      }

      /* "numpy.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L13;
      }

      /* "numpy.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L13;
      }

      /* "numpy.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_3 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L13;
      }
      /*else*/ {

        /* "numpy.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_7), __pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L13:;

      /* "numpy.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L11;
    }
    /*else*/ {

      /* "numpy.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_12 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_12;
    }
    __pyx_L11:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "numpy.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":965
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "numpy.pxd":967
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "numpy.pxd":968
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":970
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "numpy.pxd":971
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "numpy.pxd":972
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "numpy.pxd":973
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "numpy.pxd":976
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "numpy.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":979
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("dtypes"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_kp_u_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0, 0},
  {&__pyx_kp_u_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0, 0},
  {&__pyx_kp_u_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0, 0},
  {&__pyx_kp_u_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0, 0},
  {&__pyx_kp_u_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0, 0},
  {&__pyx_n_s__NotImplemented, __pyx_k__NotImplemented, sizeof(__pyx_k__NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__XDInt, __pyx_k__XDInt, sizeof(__pyx_k__XDInt), 0, 0, 1, 1},
  {&__pyx_n_s__XDRectangle, __pyx_k__XDRectangle, sizeof(__pyx_k__XDRectangle), 0, 0, 1, 1},
  {&__pyx_n_s____import__, __pyx_k____import__, sizeof(__pyx_k____import__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__basestring, __pyx_k__basestring, sizeof(__pyx_k__basestring), 0, 0, 1, 1},
  {&__pyx_n_s__collections, __pyx_k__collections, sizeof(__pyx_k__collections), 0, 0, 1, 1},
  {&__pyx_n_s__doc, __pyx_k__doc, sizeof(__pyx_k__doc), 0, 0, 1, 1},
  {&__pyx_n_s__dtypes, __pyx_k__dtypes, sizeof(__pyx_k__dtypes), 0, 0, 1, 1},
  {&__pyx_n_s__flags, __pyx_k__flags, sizeof(__pyx_k__flags), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__int, __pyx_k__int, sizeof(__pyx_k__int), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__offset, __pyx_k__offset, sizeof(__pyx_k__offset), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__rectangle, __pyx_k__rectangle, sizeof(__pyx_k__rectangle), 0, 0, 1, 1},
  {&__pyx_n_s__type, __pyx_k__type, sizeof(__pyx_k__type), 0, 0, 1, 1},
  {&__pyx_n_s__xd_int, __pyx_k__xd_int, sizeof(__pyx_k__xd_int), 0, 0, 1, 1},
  {&__pyx_n_s__xd_rectangle, __pyx_k__xd_rectangle, sizeof(__pyx_k__xd_rectangle), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s__NotImplemented); if (!__pyx_builtin_NotImplemented) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s__id); if (!__pyx_builtin_id) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_k_tuple_2 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_1)); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_k_tuple_4 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_3)); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_4);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_k_tuple_6 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_5)); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_6);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_k_tuple_9 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_8)); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_9);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_k_tuple_10 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_5)); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_10);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_k_tuple_12 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_11)); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_12);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initdtypes(void); /*proto*/
PyMODINIT_FUNC initdtypes(void)
#else
PyMODINIT_FUNC PyInit_dtypes(void); /*proto*/
PyMODINIT_FUNC PyInit_dtypes(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  xdress_extra_types::MemoryKnight<int> __pyx_t_4;
  xdress_extra_types::MemoryKnight<__pyx_t_4rect_6dtypes_PyXDInt_Type> __pyx_t_5;
  PyMemberDef __pyx_t_6;
  PyGetSetDef __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  xdress_extra_types::MemoryKnight<shapes::Rectangle> __pyx_t_10;
  xdress_extra_types::MemoryKnight<__pyx_t_4rect_6dtypes_PyXDRectangle_Type> __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_dtypes(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("dtypes"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "rect.dtypes")) {
      if (unlikely(PyDict_SetItemString(modules, "rect.dtypes", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_rect__dtypes) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_4rect_6dtypes_PyXD_Int = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4rect_6dtypes_xd_int_descr = Py_None; Py_INCREF(Py_None);
  __pyx_v_4rect_6dtypes_PyXD_Rectangle = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4rect_6dtypes_xd_rectangle_descr = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("pyxd_int_getitem", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_int_getitem, "PyObject *(void *, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_int_setitem", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_int_setitem, "int (PyObject *, void *, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_int_copyswapn", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_int_copyswapn, "void (void *, npy_intp, void *, npy_intp, npy_intp, int, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_int_copyswap", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_int_copyswap, "void (void *, void *, int, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_int_nonzero", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_int_nonzero, "npy_bool (void *, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_rectangle_getitem", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_rectangle_getitem, "PyObject *(void *, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_rectangle_setitem", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_rectangle_setitem, "int (PyObject *, void *, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_rectangle_copyswapn", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_rectangle_copyswapn, "void (void *, npy_intp, void *, npy_intp, npy_intp, int, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_rectangle_copyswap", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_rectangle_copyswap, "void (void *, void *, int, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("pyxd_rectangle_nonzero", (void (*)(void))__pyx_f_4rect_6dtypes_pyxd_rectangle_nonzero, "npy_bool (void *, void *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4rect_9rectangle_Rectangle = __Pyx_ImportType("rect.rectangle", "Rectangle", sizeof(struct __pyx_obj_4rect_9rectangle_Rectangle), 1); if (unlikely(!__pyx_ptype_4rect_9rectangle_Rectangle)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4rect_9rectangle_AreaHandlerStruct = __Pyx_ImportType("rect.rectangle", "AreaHandlerStruct", sizeof(struct __pyx_obj_4rect_9rectangle_AreaHandlerStruct), 1); if (unlikely(!__pyx_ptype_4rect_9rectangle_AreaHandlerStruct)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("rect.rectangle"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy0", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy0, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy1", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy1, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy2", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy2, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy3", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy3, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy4", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy4, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy5", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy5, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy6", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy6, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_xdress_AreaHandlerStruct_op_proxy7", (void **)&__pyx_vp_4rect_9rectangle__xdress_AreaHandlerStruct_op_proxy7, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_current__xdress_AreaHandlerStruct_op_proxy_vtab_i", (void **)&__pyx_vp_4rect_9rectangle__current__xdress_AreaHandlerStruct_op_proxy_vtab_i, "unsigned int") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "_MAX_CALLBACKS_AreaHandlerStruct", (void **)&__pyx_vp_4rect_9rectangle__MAX_CALLBACKS_AreaHandlerStruct, "unsigned int") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "rect/dtypes.pyx":17
 * 
 * # Python Imports
 * import collections             # <<<<<<<<<<<<<<
 * 
 * cimport numpy as np
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__collections), 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__collections, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rect/dtypes.pyx":20
 * 
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * np.import_array()
 * 
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__np, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rect/dtypes.pyx":21
 * cimport numpy as np
 * import numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * cimport xdress_extra_types
 */
  import_array();

  /* "rect/dtypes.pyx":30
 * 
 * # imports for types
 * import rectangle             # <<<<<<<<<<<<<<
 * 
 * dtypes = {}
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__rectangle), 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__rectangle, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rect/dtypes.pyx":32
 * import rectangle
 * 
 * dtypes = {}             # <<<<<<<<<<<<<<
 * 
 * if PY_MAJOR_VERSION >= 3:
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__dtypes, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "rect/dtypes.pyx":34
 * dtypes = {}
 * 
 * if PY_MAJOR_VERSION >= 3:             # <<<<<<<<<<<<<<
 *     basestring = str
 * 
 */
  __pyx_t_3 = ((PY_MAJOR_VERSION >= 3) != 0);
  if (__pyx_t_3) {

    /* "rect/dtypes.pyx":35
 * 
 * if PY_MAJOR_VERSION >= 3:
 *     basestring = str             # <<<<<<<<<<<<<<
 * 
 * # Dirty ifdef, else, else preprocessor hack
 */
    if (PyDict_SetItem(__pyx_d, __pyx_n_s__basestring, ((PyObject *)((PyObject*)(&PyString_Type)))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L2;
  }
  __pyx_L2:;

  /* "rect/dtypes.pyx":46
 * 
 * # int dtype
 * cdef MemoryKnight[int] mk_int = MemoryKnight[int]()             # <<<<<<<<<<<<<<
 * cdef MemoryKnight[PyXDInt_Type] mk_int_type = MemoryKnight[PyXDInt_Type]()
 * 
 */
  try {
    __pyx_t_4 = xdress_extra_types::MemoryKnight<int>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_4rect_6dtypes_mk_int = __pyx_t_4;

  /* "rect/dtypes.pyx":47
 * # int dtype
 * cdef MemoryKnight[int] mk_int = MemoryKnight[int]()
 * cdef MemoryKnight[PyXDInt_Type] mk_int_type = MemoryKnight[PyXDInt_Type]()             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_int_getitem(void * data, void * arr):
 */
  try {
    __pyx_t_5 = xdress_extra_types::MemoryKnight<__pyx_t_4rect_6dtypes_PyXDInt_Type>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_4rect_6dtypes_mk_int_type = __pyx_t_5;

  /* "rect/dtypes.pyx":136
 * 
 * cdef PyArray_ArrFuncs PyXD_Int_ArrFuncs
 * PyArray_InitArrFuncs(&PyXD_Int_ArrFuncs)             # <<<<<<<<<<<<<<
 * PyXD_Int_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_int_getitem)
 * PyXD_Int_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_int_setitem)
 */
  PyArray_InitArrFuncs((&__pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs));

  /* "rect/dtypes.pyx":137
 * cdef PyArray_ArrFuncs PyXD_Int_ArrFuncs
 * PyArray_InitArrFuncs(&PyXD_Int_ArrFuncs)
 * PyXD_Int_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_int_getitem)             # <<<<<<<<<<<<<<
 * PyXD_Int_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_int_setitem)
 * PyXD_Int_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_int_copyswapn)
 */
  __pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs.getitem = ((PyArray_GetItemFunc *)(&__pyx_f_4rect_6dtypes_pyxd_int_getitem));

  /* "rect/dtypes.pyx":138
 * PyArray_InitArrFuncs(&PyXD_Int_ArrFuncs)
 * PyXD_Int_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_int_getitem)
 * PyXD_Int_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_int_setitem)             # <<<<<<<<<<<<<<
 * PyXD_Int_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_int_copyswapn)
 * PyXD_Int_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_int_copyswap)
 */
  __pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs.setitem = ((PyArray_SetItemFunc *)(&__pyx_f_4rect_6dtypes_pyxd_int_setitem));

  /* "rect/dtypes.pyx":139
 * PyXD_Int_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_int_getitem)
 * PyXD_Int_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_int_setitem)
 * PyXD_Int_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_int_copyswapn)             # <<<<<<<<<<<<<<
 * PyXD_Int_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_int_copyswap)
 * PyXD_Int_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_int_nonzero)
 */
  __pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs.copyswapn = ((PyArray_CopySwapNFunc *)(&__pyx_f_4rect_6dtypes_pyxd_int_copyswapn));

  /* "rect/dtypes.pyx":140
 * PyXD_Int_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_int_setitem)
 * PyXD_Int_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_int_copyswapn)
 * PyXD_Int_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_int_copyswap)             # <<<<<<<<<<<<<<
 * PyXD_Int_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_int_nonzero)
 * PyXD_Int_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_int_compare)
 */
  __pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs.copyswap = ((PyArray_CopySwapFunc *)(&__pyx_f_4rect_6dtypes_pyxd_int_copyswap));

  /* "rect/dtypes.pyx":141
 * PyXD_Int_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_int_copyswapn)
 * PyXD_Int_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_int_copyswap)
 * PyXD_Int_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_int_nonzero)             # <<<<<<<<<<<<<<
 * PyXD_Int_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_int_compare)
 * 
 */
  __pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs.nonzero = ((PyArray_NonzeroFunc *)(&__pyx_f_4rect_6dtypes_pyxd_int_nonzero));

  /* "rect/dtypes.pyx":142
 * PyXD_Int_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_int_copyswap)
 * PyXD_Int_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_int_nonzero)
 * PyXD_Int_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_int_compare)             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_int_type_alloc(PyTypeObject * self, Py_ssize_t nitems):
 */
  __pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs.compare = ((PyArray_CompareFunc *)(&__pyx_f_4rect_6dtypes_pyxd_int_compare));

  /* "rect/dtypes.pyx":230
 * 
 * cdef PyMemberDef pyxd_int_type_members[1]
 * pyxd_int_type_members[0] = PyMemberDef(NULL, 0, 0, 0, NULL)             # <<<<<<<<<<<<<<
 * 
 * cdef PyGetSetDef pyxd_int_type_getset[1]
 */
  __pyx_t_6.name = NULL;
  __pyx_t_6.type = 0;
  __pyx_t_6.offset = 0;
  __pyx_t_6.flags = 0;
  __pyx_t_6.doc = NULL;
  (__pyx_v_4rect_6dtypes_pyxd_int_type_members[0]) = __pyx_t_6;

  /* "rect/dtypes.pyx":233
 * 
 * cdef PyGetSetDef pyxd_int_type_getset[1]
 * pyxd_int_type_getset[0] = PyGetSetDef(NULL)             # <<<<<<<<<<<<<<
 * 
 * cdef bint pyxd_int_is_ready
 */
  __pyx_t_7.name = NULL;
  (__pyx_v_4rect_6dtypes_pyxd_int_type_getset[0]) = __pyx_t_7;

  /* "rect/dtypes.pyx":236
 * 
 * cdef bint pyxd_int_is_ready
 * cdef type PyXD_Int = type("xd_int", ((<object> PyArray_API[10]),), {})             # <<<<<<<<<<<<<<
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
 * (<PyTypeObject *> PyXD_Int).tp_basicsize = sizeof(PyXDInt_Type)
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(PyArray_API[10])));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(PyArray_API[10])));
  __Pyx_GIVEREF(((PyObject *)(PyArray_API[10])));
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__xd_int));
  PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_n_s__xd_int));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__xd_int));
  PyTuple_SET_ITEM(__pyx_t_9, 1, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_9, 2, ((PyObject *)__pyx_t_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
  __pyx_t_2 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(((PyObject *)((PyObject*)(&PyType_Type))), ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
  __Pyx_XGOTREF(((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int));
  __Pyx_DECREF_SET(__pyx_v_4rect_6dtypes_PyXD_Int, ((PyObject*)__pyx_t_8));
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;

  /* "rect/dtypes.pyx":237
 * cdef bint pyxd_int_is_ready
 * cdef type PyXD_Int = type("xd_int", ((<object> PyArray_API[10]),), {})
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_basicsize = sizeof(PyXDInt_Type)
 * (<PyTypeObject *> PyXD_Int).tp_itemsize = 0
 */
  if (!(likely(((((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int), __pyx_ptype_7cpython_4type_type))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int);
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_3 = PyType_Ready(((PyTypeObject *)__pyx_t_8)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_4rect_6dtypes_pyxd_int_is_ready = __pyx_t_3;

  /* "rect/dtypes.pyx":238
 * cdef type PyXD_Int = type("xd_int", ((<object> PyArray_API[10]),), {})
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
 * (<PyTypeObject *> PyXD_Int).tp_basicsize = sizeof(PyXDInt_Type)             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_itemsize = 0
 * (<PyTypeObject *> PyXD_Int).tp_doc = "Python scalar type for int"
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_basicsize = (sizeof(__pyx_t_4rect_6dtypes_PyXDInt_Type));

  /* "rect/dtypes.pyx":239
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
 * (<PyTypeObject *> PyXD_Int).tp_basicsize = sizeof(PyXDInt_Type)
 * (<PyTypeObject *> PyXD_Int).tp_itemsize = 0             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_doc = "Python scalar type for int"
 * (<PyTypeObject *> PyXD_Int).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_itemsize = 0;

  /* "rect/dtypes.pyx":240
 * (<PyTypeObject *> PyXD_Int).tp_basicsize = sizeof(PyXDInt_Type)
 * (<PyTypeObject *> PyXD_Int).tp_itemsize = 0
 * (<PyTypeObject *> PyXD_Int).tp_doc = "Python scalar type for int"             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 * (<PyTypeObject *> PyXD_Int).tp_alloc = pyxd_int_type_alloc
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_doc = __pyx_k_13;

  /* "rect/dtypes.pyx":241
 * (<PyTypeObject *> PyXD_Int).tp_itemsize = 0
 * (<PyTypeObject *> PyXD_Int).tp_doc = "Python scalar type for int"
 * (<PyTypeObject *> PyXD_Int).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_alloc = pyxd_int_type_alloc
 * (<PyTypeObject *> PyXD_Int).tp_dealloc = pyxd_int_type_dealloc
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_flags = (((Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE) | Py_TPFLAGS_CHECKTYPES) | Py_TPFLAGS_HEAPTYPE);

  /* "rect/dtypes.pyx":242
 * (<PyTypeObject *> PyXD_Int).tp_doc = "Python scalar type for int"
 * (<PyTypeObject *> PyXD_Int).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 * (<PyTypeObject *> PyXD_Int).tp_alloc = pyxd_int_type_alloc             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_dealloc = pyxd_int_type_dealloc
 * (<PyTypeObject *> PyXD_Int).tp_new = pyxd_int_type_new
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_alloc = __pyx_f_4rect_6dtypes_pyxd_int_type_alloc;

  /* "rect/dtypes.pyx":243
 * (<PyTypeObject *> PyXD_Int).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 * (<PyTypeObject *> PyXD_Int).tp_alloc = pyxd_int_type_alloc
 * (<PyTypeObject *> PyXD_Int).tp_dealloc = pyxd_int_type_dealloc             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_new = pyxd_int_type_new
 * (<PyTypeObject *> PyXD_Int).tp_free = pyxd_int_type_free
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_dealloc = __pyx_f_4rect_6dtypes_pyxd_int_type_dealloc;

  /* "rect/dtypes.pyx":244
 * (<PyTypeObject *> PyXD_Int).tp_alloc = pyxd_int_type_alloc
 * (<PyTypeObject *> PyXD_Int).tp_dealloc = pyxd_int_type_dealloc
 * (<PyTypeObject *> PyXD_Int).tp_new = pyxd_int_type_new             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_free = pyxd_int_type_free
 * (<PyTypeObject *> PyXD_Int).tp_str = pyxd_int_type_str
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_new = __pyx_f_4rect_6dtypes_pyxd_int_type_new;

  /* "rect/dtypes.pyx":245
 * (<PyTypeObject *> PyXD_Int).tp_dealloc = pyxd_int_type_dealloc
 * (<PyTypeObject *> PyXD_Int).tp_new = pyxd_int_type_new
 * (<PyTypeObject *> PyXD_Int).tp_free = pyxd_int_type_free             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_str = pyxd_int_type_str
 * (<PyTypeObject *> PyXD_Int).tp_repr = pyxd_int_type_repr
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_free = __pyx_f_4rect_6dtypes_pyxd_int_type_free;

  /* "rect/dtypes.pyx":246
 * (<PyTypeObject *> PyXD_Int).tp_new = pyxd_int_type_new
 * (<PyTypeObject *> PyXD_Int).tp_free = pyxd_int_type_free
 * (<PyTypeObject *> PyXD_Int).tp_str = pyxd_int_type_str             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_repr = pyxd_int_type_repr
 * (<PyTypeObject *> PyXD_Int).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_str = __pyx_f_4rect_6dtypes_pyxd_int_type_str;

  /* "rect/dtypes.pyx":247
 * (<PyTypeObject *> PyXD_Int).tp_free = pyxd_int_type_free
 * (<PyTypeObject *> PyXD_Int).tp_str = pyxd_int_type_str
 * (<PyTypeObject *> PyXD_Int).tp_repr = pyxd_int_type_repr             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 * (<PyTypeObject *> PyXD_Int).tp_hash = pyxd_int_type_hash
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_repr = __pyx_f_4rect_6dtypes_pyxd_int_type_repr;

  /* "rect/dtypes.pyx":248
 * (<PyTypeObject *> PyXD_Int).tp_str = pyxd_int_type_str
 * (<PyTypeObject *> PyXD_Int).tp_repr = pyxd_int_type_repr
 * (<PyTypeObject *> PyXD_Int).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_hash = pyxd_int_type_hash
 * emit_ifpy2k()
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_base = ((PyTypeObject *)(PyArray_API[10]));

  /* "rect/dtypes.pyx":249
 * (<PyTypeObject *> PyXD_Int).tp_repr = pyxd_int_type_repr
 * (<PyTypeObject *> PyXD_Int).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 * (<PyTypeObject *> PyXD_Int).tp_hash = pyxd_int_type_hash             # <<<<<<<<<<<<<<
 * emit_ifpy2k()
 * (<PyTypeObject *> PyXD_Int).tp_compare = &pyxd_int_type_compare
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_hash = __pyx_f_4rect_6dtypes_pyxd_int_type_hash;

  /* "rect/dtypes.pyx":250
 * (<PyTypeObject *> PyXD_Int).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 * (<PyTypeObject *> PyXD_Int).tp_hash = pyxd_int_type_hash
 * emit_ifpy2k()             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_compare = &pyxd_int_type_compare
 * emit_endif()
 */
  #if PY_MAJOR_VERSION == 2 //();

  /* "rect/dtypes.pyx":251
 * (<PyTypeObject *> PyXD_Int).tp_hash = pyxd_int_type_hash
 * emit_ifpy2k()
 * (<PyTypeObject *> PyXD_Int).tp_compare = &pyxd_int_type_compare             # <<<<<<<<<<<<<<
 * emit_endif()
 * (<PyTypeObject *> PyXD_Int).tp_richcompare = pyxd_int_type_richcompare
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_compare = (&__pyx_f_4rect_6dtypes_pyxd_int_type_compare);

  /* "rect/dtypes.pyx":252
 * emit_ifpy2k()
 * (<PyTypeObject *> PyXD_Int).tp_compare = &pyxd_int_type_compare
 * emit_endif()             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_richcompare = pyxd_int_type_richcompare
 * (<PyTypeObject *> PyXD_Int).tp_members = pyxd_int_type_members
 */
  #endif //();

  /* "rect/dtypes.pyx":253
 * (<PyTypeObject *> PyXD_Int).tp_compare = &pyxd_int_type_compare
 * emit_endif()
 * (<PyTypeObject *> PyXD_Int).tp_richcompare = pyxd_int_type_richcompare             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_members = pyxd_int_type_members
 * (<PyTypeObject *> PyXD_Int).tp_getset = pyxd_int_type_getset
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_richcompare = __pyx_f_4rect_6dtypes_pyxd_int_type_richcompare;

  /* "rect/dtypes.pyx":254
 * emit_endif()
 * (<PyTypeObject *> PyXD_Int).tp_richcompare = pyxd_int_type_richcompare
 * (<PyTypeObject *> PyXD_Int).tp_members = pyxd_int_type_members             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Int).tp_getset = pyxd_int_type_getset
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_members = __pyx_v_4rect_6dtypes_pyxd_int_type_members;

  /* "rect/dtypes.pyx":255
 * (<PyTypeObject *> PyXD_Int).tp_richcompare = pyxd_int_type_richcompare
 * (<PyTypeObject *> PyXD_Int).tp_members = pyxd_int_type_members
 * (<PyTypeObject *> PyXD_Int).tp_getset = pyxd_int_type_getset             # <<<<<<<<<<<<<<
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
 * Py_INCREF(PyXD_Int)
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int)->tp_getset = __pyx_v_4rect_6dtypes_pyxd_int_type_getset;

  /* "rect/dtypes.pyx":256
 * (<PyTypeObject *> PyXD_Int).tp_members = pyxd_int_type_members
 * (<PyTypeObject *> PyXD_Int).tp_getset = pyxd_int_type_getset
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)             # <<<<<<<<<<<<<<
 * Py_INCREF(PyXD_Int)
 * XDInt = PyXD_Int
 */
  if (!(likely(((((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int), __pyx_ptype_7cpython_4type_type))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int);
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_3 = PyType_Ready(((PyTypeObject *)__pyx_t_8)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_4rect_6dtypes_pyxd_int_is_ready = __pyx_t_3;

  /* "rect/dtypes.pyx":257
 * (<PyTypeObject *> PyXD_Int).tp_getset = pyxd_int_type_getset
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
 * Py_INCREF(PyXD_Int)             # <<<<<<<<<<<<<<
 * XDInt = PyXD_Int
 * 
 */
  __pyx_t_8 = ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int);
  __Pyx_INCREF(__pyx_t_8);
  Py_INCREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "rect/dtypes.pyx":258
 * pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
 * Py_INCREF(PyXD_Int)
 * XDInt = PyXD_Int             # <<<<<<<<<<<<<<
 * 
 * cdef PyArray_Descr * c_xd_int_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__XDInt, ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Int)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rect/dtypes.pyx":260
 * XDInt = PyXD_Int
 * 
 * cdef PyArray_Descr * c_xd_int_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))             # <<<<<<<<<<<<<<
 * (<PyObject *> c_xd_int_descr).ob_refcnt = 0 # ob_refcnt
 * (<PyObject *> c_xd_int_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr = ((PyArray_Descr *)malloc((sizeof(PyArray_Descr))));

  /* "rect/dtypes.pyx":261
 * 
 * cdef PyArray_Descr * c_xd_int_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
 * (<PyObject *> c_xd_int_descr).ob_refcnt = 0 # ob_refcnt             # <<<<<<<<<<<<<<
 * (<PyObject *> c_xd_int_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 * c_xd_int_descr.typeobj = <PyTypeObject *> PyXD_Int # typeobj
 */
  ((PyObject *)__pyx_v_4rect_6dtypes_c_xd_int_descr)->ob_refcnt = 0;

  /* "rect/dtypes.pyx":262
 * cdef PyArray_Descr * c_xd_int_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
 * (<PyObject *> c_xd_int_descr).ob_refcnt = 0 # ob_refcnt
 * (<PyObject *> c_xd_int_descr).ob_type = <PyTypeObject *> PyArray_API[3]             # <<<<<<<<<<<<<<
 * c_xd_int_descr.typeobj = <PyTypeObject *> PyXD_Int # typeobj
 * c_xd_int_descr.kind = 'x'  # kind, for xdress
 */
  ((PyObject *)__pyx_v_4rect_6dtypes_c_xd_int_descr)->ob_type = ((PyTypeObject *)(PyArray_API[3]));

  /* "rect/dtypes.pyx":263
 * (<PyObject *> c_xd_int_descr).ob_refcnt = 0 # ob_refcnt
 * (<PyObject *> c_xd_int_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 * c_xd_int_descr.typeobj = <PyTypeObject *> PyXD_Int # typeobj             # <<<<<<<<<<<<<<
 * c_xd_int_descr.kind = 'x'  # kind, for xdress
 * c_xd_int_descr.type = 'x'  # type
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->typeobj = ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Int);

  /* "rect/dtypes.pyx":264
 * (<PyObject *> c_xd_int_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 * c_xd_int_descr.typeobj = <PyTypeObject *> PyXD_Int # typeobj
 * c_xd_int_descr.kind = 'x'  # kind, for xdress             # <<<<<<<<<<<<<<
 * c_xd_int_descr.type = 'x'  # type
 * c_xd_int_descr.byteorder = '='  # byteorder
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->kind = 'x';

  /* "rect/dtypes.pyx":265
 * c_xd_int_descr.typeobj = <PyTypeObject *> PyXD_Int # typeobj
 * c_xd_int_descr.kind = 'x'  # kind, for xdress
 * c_xd_int_descr.type = 'x'  # type             # <<<<<<<<<<<<<<
 * c_xd_int_descr.byteorder = '='  # byteorder
 * c_xd_int_descr.flags = 0    # flags
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->type = 'x';

  /* "rect/dtypes.pyx":266
 * c_xd_int_descr.kind = 'x'  # kind, for xdress
 * c_xd_int_descr.type = 'x'  # type
 * c_xd_int_descr.byteorder = '='  # byteorder             # <<<<<<<<<<<<<<
 * c_xd_int_descr.flags = 0    # flags
 * c_xd_int_descr.type_num = 0    # type_num, assigned at registration
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->byteorder = '=';

  /* "rect/dtypes.pyx":267
 * c_xd_int_descr.type = 'x'  # type
 * c_xd_int_descr.byteorder = '='  # byteorder
 * c_xd_int_descr.flags = 0    # flags             # <<<<<<<<<<<<<<
 * c_xd_int_descr.type_num = 0    # type_num, assigned at registration
 * c_xd_int_descr.elsize = sizeof(int)  # elsize,
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->flags = 0;

  /* "rect/dtypes.pyx":268
 * c_xd_int_descr.byteorder = '='  # byteorder
 * c_xd_int_descr.flags = 0    # flags
 * c_xd_int_descr.type_num = 0    # type_num, assigned at registration             # <<<<<<<<<<<<<<
 * c_xd_int_descr.elsize = sizeof(int)  # elsize,
 * c_xd_int_descr.alignment = 8  # alignment
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->type_num = 0;

  /* "rect/dtypes.pyx":269
 * c_xd_int_descr.flags = 0    # flags
 * c_xd_int_descr.type_num = 0    # type_num, assigned at registration
 * c_xd_int_descr.elsize = sizeof(int)  # elsize,             # <<<<<<<<<<<<<<
 * c_xd_int_descr.alignment = 8  # alignment
 * c_xd_int_descr.subarray = NULL  # subarray
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->elsize = (sizeof(int));

  /* "rect/dtypes.pyx":270
 * c_xd_int_descr.type_num = 0    # type_num, assigned at registration
 * c_xd_int_descr.elsize = sizeof(int)  # elsize,
 * c_xd_int_descr.alignment = 8  # alignment             # <<<<<<<<<<<<<<
 * c_xd_int_descr.subarray = NULL  # subarray
 * c_xd_int_descr.fields = NULL  # fields
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->alignment = 8;

  /* "rect/dtypes.pyx":271
 * c_xd_int_descr.elsize = sizeof(int)  # elsize,
 * c_xd_int_descr.alignment = 8  # alignment
 * c_xd_int_descr.subarray = NULL  # subarray             # <<<<<<<<<<<<<<
 * c_xd_int_descr.fields = NULL  # fields
 * c_xd_int_descr.names = NULL
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->subarray = NULL;

  /* "rect/dtypes.pyx":272
 * c_xd_int_descr.alignment = 8  # alignment
 * c_xd_int_descr.subarray = NULL  # subarray
 * c_xd_int_descr.fields = NULL  # fields             # <<<<<<<<<<<<<<
 * c_xd_int_descr.names = NULL
 * (<PyArray_Descr *> c_xd_int_descr).f = <PyArray_ArrFuncs *> &PyXD_Int_ArrFuncs  # f == PyArray_ArrFuncs
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->fields = NULL;

  /* "rect/dtypes.pyx":273
 * c_xd_int_descr.subarray = NULL  # subarray
 * c_xd_int_descr.fields = NULL  # fields
 * c_xd_int_descr.names = NULL             # <<<<<<<<<<<<<<
 * (<PyArray_Descr *> c_xd_int_descr).f = <PyArray_ArrFuncs *> &PyXD_Int_ArrFuncs  # f == PyArray_ArrFuncs
 * 
 */
  __pyx_v_4rect_6dtypes_c_xd_int_descr->names = NULL;

  /* "rect/dtypes.pyx":274
 * c_xd_int_descr.fields = NULL  # fields
 * c_xd_int_descr.names = NULL
 * (<PyArray_Descr *> c_xd_int_descr).f = <PyArray_ArrFuncs *> &PyXD_Int_ArrFuncs  # f == PyArray_ArrFuncs             # <<<<<<<<<<<<<<
 * 
 * cdef object xd_int_descr = <object> (<void *> c_xd_int_descr)
 */
  ((PyArray_Descr *)__pyx_v_4rect_6dtypes_c_xd_int_descr)->f = ((PyArray_ArrFuncs *)(&__pyx_v_4rect_6dtypes_PyXD_Int_ArrFuncs));

  /* "rect/dtypes.pyx":276
 * (<PyArray_Descr *> c_xd_int_descr).f = <PyArray_ArrFuncs *> &PyXD_Int_ArrFuncs  # f == PyArray_ArrFuncs
 * 
 * cdef object xd_int_descr = <object> (<void *> c_xd_int_descr)             # <<<<<<<<<<<<<<
 * Py_INCREF(<object> xd_int_descr)
 * xd_int = xd_int_descr
 */
  __Pyx_INCREF(((PyObject *)((void *)__pyx_v_4rect_6dtypes_c_xd_int_descr)));
  __Pyx_XGOTREF(__pyx_v_4rect_6dtypes_xd_int_descr);
  __Pyx_DECREF_SET(__pyx_v_4rect_6dtypes_xd_int_descr, ((PyObject *)((void *)__pyx_v_4rect_6dtypes_c_xd_int_descr)));
  __Pyx_GIVEREF(((PyObject *)((void *)__pyx_v_4rect_6dtypes_c_xd_int_descr)));

  /* "rect/dtypes.pyx":277
 * 
 * cdef object xd_int_descr = <object> (<void *> c_xd_int_descr)
 * Py_INCREF(<object> xd_int_descr)             # <<<<<<<<<<<<<<
 * xd_int = xd_int_descr
 * cdef int xd_int_num = PyArray_RegisterDataType(c_xd_int_descr)
 */
  __pyx_t_8 = __pyx_v_4rect_6dtypes_xd_int_descr;
  __Pyx_INCREF(__pyx_t_8);
  Py_INCREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "rect/dtypes.pyx":278
 * cdef object xd_int_descr = <object> (<void *> c_xd_int_descr)
 * Py_INCREF(<object> xd_int_descr)
 * xd_int = xd_int_descr             # <<<<<<<<<<<<<<
 * cdef int xd_int_num = PyArray_RegisterDataType(c_xd_int_descr)
 * dtypes['int'] = xd_int
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__xd_int, __pyx_v_4rect_6dtypes_xd_int_descr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rect/dtypes.pyx":279
 * Py_INCREF(<object> xd_int_descr)
 * xd_int = xd_int_descr
 * cdef int xd_int_num = PyArray_RegisterDataType(c_xd_int_descr)             # <<<<<<<<<<<<<<
 * dtypes['int'] = xd_int
 * dtypes['xd_int'] = xd_int
 */
  __pyx_v_4rect_6dtypes_xd_int_num = PyArray_RegisterDataType(__pyx_v_4rect_6dtypes_c_xd_int_descr);

  /* "rect/dtypes.pyx":280
 * xd_int = xd_int_descr
 * cdef int xd_int_num = PyArray_RegisterDataType(c_xd_int_descr)
 * dtypes['int'] = xd_int             # <<<<<<<<<<<<<<
 * dtypes['xd_int'] = xd_int
 * dtypes[xd_int_num] = xd_int
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s__xd_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s__dtypes); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyObject_SetItem(__pyx_t_9, ((PyObject *)__pyx_n_s__int), __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "rect/dtypes.pyx":281
 * cdef int xd_int_num = PyArray_RegisterDataType(c_xd_int_descr)
 * dtypes['int'] = xd_int
 * dtypes['xd_int'] = xd_int             # <<<<<<<<<<<<<<
 * dtypes[xd_int_num] = xd_int
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s__xd_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s__dtypes); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (PyObject_SetItem(__pyx_t_9, ((PyObject *)__pyx_n_s__xd_int), __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "rect/dtypes.pyx":282
 * dtypes['int'] = xd_int
 * dtypes['xd_int'] = xd_int
 * dtypes[xd_int_num] = xd_int             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s__xd_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s__dtypes); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetItemInt(__pyx_t_9, __pyx_v_4rect_6dtypes_xd_int_num, __pyx_t_8, sizeof(int), PyInt_FromLong, 0, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "rect/dtypes.pyx":287
 * 
 * # cpp_rectangle.Rectangle dtype
 * cdef MemoryKnight[cpp_rectangle.Rectangle] mk_rectangle = MemoryKnight[cpp_rectangle.Rectangle]()             # <<<<<<<<<<<<<<
 * cdef MemoryKnight[PyXDRectangle_Type] mk_rectangle_type = MemoryKnight[PyXDRectangle_Type]()
 * 
 */
  try {
    __pyx_t_10 = xdress_extra_types::MemoryKnight<shapes::Rectangle>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_4rect_6dtypes_mk_rectangle = __pyx_t_10;

  /* "rect/dtypes.pyx":288
 * # cpp_rectangle.Rectangle dtype
 * cdef MemoryKnight[cpp_rectangle.Rectangle] mk_rectangle = MemoryKnight[cpp_rectangle.Rectangle]()
 * cdef MemoryKnight[PyXDRectangle_Type] mk_rectangle_type = MemoryKnight[PyXDRectangle_Type]()             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_rectangle_getitem(void * data, void * arr):
 */
  try {
    __pyx_t_11 = xdress_extra_types::MemoryKnight<__pyx_t_4rect_6dtypes_PyXDRectangle_Type>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_4rect_6dtypes_mk_rectangle_type = __pyx_t_11;

  /* "rect/dtypes.pyx":378
 * 
 * cdef PyArray_ArrFuncs PyXD_Rectangle_ArrFuncs
 * PyArray_InitArrFuncs(&PyXD_Rectangle_ArrFuncs)             # <<<<<<<<<<<<<<
 * PyXD_Rectangle_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_rectangle_getitem)
 * PyXD_Rectangle_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_rectangle_setitem)
 */
  PyArray_InitArrFuncs((&__pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs));

  /* "rect/dtypes.pyx":379
 * cdef PyArray_ArrFuncs PyXD_Rectangle_ArrFuncs
 * PyArray_InitArrFuncs(&PyXD_Rectangle_ArrFuncs)
 * PyXD_Rectangle_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_rectangle_getitem)             # <<<<<<<<<<<<<<
 * PyXD_Rectangle_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_rectangle_setitem)
 * PyXD_Rectangle_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_rectangle_copyswapn)
 */
  __pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs.getitem = ((PyArray_GetItemFunc *)(&__pyx_f_4rect_6dtypes_pyxd_rectangle_getitem));

  /* "rect/dtypes.pyx":380
 * PyArray_InitArrFuncs(&PyXD_Rectangle_ArrFuncs)
 * PyXD_Rectangle_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_rectangle_getitem)
 * PyXD_Rectangle_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_rectangle_setitem)             # <<<<<<<<<<<<<<
 * PyXD_Rectangle_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_rectangle_copyswapn)
 * PyXD_Rectangle_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_rectangle_copyswap)
 */
  __pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs.setitem = ((PyArray_SetItemFunc *)(&__pyx_f_4rect_6dtypes_pyxd_rectangle_setitem));

  /* "rect/dtypes.pyx":381
 * PyXD_Rectangle_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_rectangle_getitem)
 * PyXD_Rectangle_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_rectangle_setitem)
 * PyXD_Rectangle_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_rectangle_copyswapn)             # <<<<<<<<<<<<<<
 * PyXD_Rectangle_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_rectangle_copyswap)
 * PyXD_Rectangle_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_rectangle_nonzero)
 */
  __pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs.copyswapn = ((PyArray_CopySwapNFunc *)(&__pyx_f_4rect_6dtypes_pyxd_rectangle_copyswapn));

  /* "rect/dtypes.pyx":382
 * PyXD_Rectangle_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_rectangle_setitem)
 * PyXD_Rectangle_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_rectangle_copyswapn)
 * PyXD_Rectangle_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_rectangle_copyswap)             # <<<<<<<<<<<<<<
 * PyXD_Rectangle_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_rectangle_nonzero)
 * PyXD_Rectangle_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_rectangle_compare)
 */
  __pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs.copyswap = ((PyArray_CopySwapFunc *)(&__pyx_f_4rect_6dtypes_pyxd_rectangle_copyswap));

  /* "rect/dtypes.pyx":383
 * PyXD_Rectangle_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_rectangle_copyswapn)
 * PyXD_Rectangle_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_rectangle_copyswap)
 * PyXD_Rectangle_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_rectangle_nonzero)             # <<<<<<<<<<<<<<
 * PyXD_Rectangle_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_rectangle_compare)
 * 
 */
  __pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs.nonzero = ((PyArray_NonzeroFunc *)(&__pyx_f_4rect_6dtypes_pyxd_rectangle_nonzero));

  /* "rect/dtypes.pyx":384
 * PyXD_Rectangle_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_rectangle_copyswap)
 * PyXD_Rectangle_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_rectangle_nonzero)
 * PyXD_Rectangle_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_rectangle_compare)             # <<<<<<<<<<<<<<
 * 
 * cdef object pyxd_rectangle_type_alloc(PyTypeObject * self, Py_ssize_t nitems):
 */
  __pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs.compare = ((PyArray_CompareFunc *)(&__pyx_f_4rect_6dtypes_pyxd_rectangle_compare));

  /* "rect/dtypes.pyx":474
 * 
 * cdef PyMemberDef pyxd_rectangle_type_members[1]
 * pyxd_rectangle_type_members[0] = PyMemberDef(NULL, 0, 0, 0, NULL)             # <<<<<<<<<<<<<<
 * 
 * cdef PyGetSetDef pyxd_rectangle_type_getset[1]
 */
  __pyx_t_6.name = NULL;
  __pyx_t_6.type = 0;
  __pyx_t_6.offset = 0;
  __pyx_t_6.flags = 0;
  __pyx_t_6.doc = NULL;
  (__pyx_v_4rect_6dtypes_pyxd_rectangle_type_members[0]) = __pyx_t_6;

  /* "rect/dtypes.pyx":477
 * 
 * cdef PyGetSetDef pyxd_rectangle_type_getset[1]
 * pyxd_rectangle_type_getset[0] = PyGetSetDef(NULL)             # <<<<<<<<<<<<<<
 * 
 * cdef bint pyxd_rectangle_is_ready
 */
  __pyx_t_7.name = NULL;
  (__pyx_v_4rect_6dtypes_pyxd_rectangle_type_getset[0]) = __pyx_t_7;

  /* "rect/dtypes.pyx":480
 * 
 * cdef bint pyxd_rectangle_is_ready
 * cdef type PyXD_Rectangle = type("xd_rectangle", ((<object> PyArray_API[10]),), {})             # <<<<<<<<<<<<<<
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)
 * (<PyTypeObject *> PyXD_Rectangle).tp_basicsize = sizeof(PyXDRectangle_Type)
 */
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(((PyObject *)(PyArray_API[10])));
  PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)(PyArray_API[10])));
  __Pyx_GIVEREF(((PyObject *)(PyArray_API[10])));
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_9));
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__xd_rectangle));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__xd_rectangle));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__xd_rectangle));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_t_9));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_9));
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(((PyObject *)((PyObject*)(&PyType_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_XGOTREF(((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle));
  __Pyx_DECREF_SET(__pyx_v_4rect_6dtypes_PyXD_Rectangle, ((PyObject*)__pyx_t_9));
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;

  /* "rect/dtypes.pyx":481
 * cdef bint pyxd_rectangle_is_ready
 * cdef type PyXD_Rectangle = type("xd_rectangle", ((<object> PyArray_API[10]),), {})
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_basicsize = sizeof(PyXDRectangle_Type)
 * (<PyTypeObject *> PyXD_Rectangle).tp_itemsize = 0
 */
  if (!(likely(((((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle), __pyx_ptype_7cpython_4type_type))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_9 = ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle);
  __Pyx_INCREF(__pyx_t_9);
  __pyx_t_3 = PyType_Ready(((PyTypeObject *)__pyx_t_9)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_4rect_6dtypes_pyxd_rectangle_is_ready = __pyx_t_3;

  /* "rect/dtypes.pyx":482
 * cdef type PyXD_Rectangle = type("xd_rectangle", ((<object> PyArray_API[10]),), {})
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)
 * (<PyTypeObject *> PyXD_Rectangle).tp_basicsize = sizeof(PyXDRectangle_Type)             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_itemsize = 0
 * (<PyTypeObject *> PyXD_Rectangle).tp_doc = "Python scalar type for cpp_rectangle.Rectangle"
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_basicsize = (sizeof(__pyx_t_4rect_6dtypes_PyXDRectangle_Type));

  /* "rect/dtypes.pyx":483
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)
 * (<PyTypeObject *> PyXD_Rectangle).tp_basicsize = sizeof(PyXDRectangle_Type)
 * (<PyTypeObject *> PyXD_Rectangle).tp_itemsize = 0             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_doc = "Python scalar type for cpp_rectangle.Rectangle"
 * (<PyTypeObject *> PyXD_Rectangle).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_itemsize = 0;

  /* "rect/dtypes.pyx":484
 * (<PyTypeObject *> PyXD_Rectangle).tp_basicsize = sizeof(PyXDRectangle_Type)
 * (<PyTypeObject *> PyXD_Rectangle).tp_itemsize = 0
 * (<PyTypeObject *> PyXD_Rectangle).tp_doc = "Python scalar type for cpp_rectangle.Rectangle"             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 * (<PyTypeObject *> PyXD_Rectangle).tp_alloc = pyxd_rectangle_type_alloc
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_doc = __pyx_k_14;

  /* "rect/dtypes.pyx":485
 * (<PyTypeObject *> PyXD_Rectangle).tp_itemsize = 0
 * (<PyTypeObject *> PyXD_Rectangle).tp_doc = "Python scalar type for cpp_rectangle.Rectangle"
 * (<PyTypeObject *> PyXD_Rectangle).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_alloc = pyxd_rectangle_type_alloc
 * (<PyTypeObject *> PyXD_Rectangle).tp_dealloc = pyxd_rectangle_type_dealloc
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_flags = (((Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE) | Py_TPFLAGS_CHECKTYPES) | Py_TPFLAGS_HEAPTYPE);

  /* "rect/dtypes.pyx":486
 * (<PyTypeObject *> PyXD_Rectangle).tp_doc = "Python scalar type for cpp_rectangle.Rectangle"
 * (<PyTypeObject *> PyXD_Rectangle).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 * (<PyTypeObject *> PyXD_Rectangle).tp_alloc = pyxd_rectangle_type_alloc             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_dealloc = pyxd_rectangle_type_dealloc
 * (<PyTypeObject *> PyXD_Rectangle).tp_new = pyxd_rectangle_type_new
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_alloc = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_alloc;

  /* "rect/dtypes.pyx":487
 * (<PyTypeObject *> PyXD_Rectangle).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
 * (<PyTypeObject *> PyXD_Rectangle).tp_alloc = pyxd_rectangle_type_alloc
 * (<PyTypeObject *> PyXD_Rectangle).tp_dealloc = pyxd_rectangle_type_dealloc             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_new = pyxd_rectangle_type_new
 * (<PyTypeObject *> PyXD_Rectangle).tp_free = pyxd_rectangle_type_free
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_dealloc = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_dealloc;

  /* "rect/dtypes.pyx":488
 * (<PyTypeObject *> PyXD_Rectangle).tp_alloc = pyxd_rectangle_type_alloc
 * (<PyTypeObject *> PyXD_Rectangle).tp_dealloc = pyxd_rectangle_type_dealloc
 * (<PyTypeObject *> PyXD_Rectangle).tp_new = pyxd_rectangle_type_new             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_free = pyxd_rectangle_type_free
 * (<PyTypeObject *> PyXD_Rectangle).tp_str = pyxd_rectangle_type_str
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_new = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_new;

  /* "rect/dtypes.pyx":489
 * (<PyTypeObject *> PyXD_Rectangle).tp_dealloc = pyxd_rectangle_type_dealloc
 * (<PyTypeObject *> PyXD_Rectangle).tp_new = pyxd_rectangle_type_new
 * (<PyTypeObject *> PyXD_Rectangle).tp_free = pyxd_rectangle_type_free             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_str = pyxd_rectangle_type_str
 * (<PyTypeObject *> PyXD_Rectangle).tp_repr = pyxd_rectangle_type_repr
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_free = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_free;

  /* "rect/dtypes.pyx":490
 * (<PyTypeObject *> PyXD_Rectangle).tp_new = pyxd_rectangle_type_new
 * (<PyTypeObject *> PyXD_Rectangle).tp_free = pyxd_rectangle_type_free
 * (<PyTypeObject *> PyXD_Rectangle).tp_str = pyxd_rectangle_type_str             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_repr = pyxd_rectangle_type_repr
 * (<PyTypeObject *> PyXD_Rectangle).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_str = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_str;

  /* "rect/dtypes.pyx":491
 * (<PyTypeObject *> PyXD_Rectangle).tp_free = pyxd_rectangle_type_free
 * (<PyTypeObject *> PyXD_Rectangle).tp_str = pyxd_rectangle_type_str
 * (<PyTypeObject *> PyXD_Rectangle).tp_repr = pyxd_rectangle_type_repr             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 * (<PyTypeObject *> PyXD_Rectangle).tp_hash = pyxd_rectangle_type_hash
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_repr = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_repr;

  /* "rect/dtypes.pyx":492
 * (<PyTypeObject *> PyXD_Rectangle).tp_str = pyxd_rectangle_type_str
 * (<PyTypeObject *> PyXD_Rectangle).tp_repr = pyxd_rectangle_type_repr
 * (<PyTypeObject *> PyXD_Rectangle).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_hash = pyxd_rectangle_type_hash
 * emit_ifpy2k()
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_base = ((PyTypeObject *)(PyArray_API[10]));

  /* "rect/dtypes.pyx":493
 * (<PyTypeObject *> PyXD_Rectangle).tp_repr = pyxd_rectangle_type_repr
 * (<PyTypeObject *> PyXD_Rectangle).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 * (<PyTypeObject *> PyXD_Rectangle).tp_hash = pyxd_rectangle_type_hash             # <<<<<<<<<<<<<<
 * emit_ifpy2k()
 * (<PyTypeObject *> PyXD_Rectangle).tp_compare = &pyxd_rectangle_type_compare
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_hash = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_hash;

  /* "rect/dtypes.pyx":494
 * (<PyTypeObject *> PyXD_Rectangle).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
 * (<PyTypeObject *> PyXD_Rectangle).tp_hash = pyxd_rectangle_type_hash
 * emit_ifpy2k()             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_compare = &pyxd_rectangle_type_compare
 * emit_endif()
 */
  #if PY_MAJOR_VERSION == 2 //();

  /* "rect/dtypes.pyx":495
 * (<PyTypeObject *> PyXD_Rectangle).tp_hash = pyxd_rectangle_type_hash
 * emit_ifpy2k()
 * (<PyTypeObject *> PyXD_Rectangle).tp_compare = &pyxd_rectangle_type_compare             # <<<<<<<<<<<<<<
 * emit_endif()
 * (<PyTypeObject *> PyXD_Rectangle).tp_richcompare = pyxd_rectangle_type_richcompare
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_compare = (&__pyx_f_4rect_6dtypes_pyxd_rectangle_type_compare);

  /* "rect/dtypes.pyx":496
 * emit_ifpy2k()
 * (<PyTypeObject *> PyXD_Rectangle).tp_compare = &pyxd_rectangle_type_compare
 * emit_endif()             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_richcompare = pyxd_rectangle_type_richcompare
 * (<PyTypeObject *> PyXD_Rectangle).tp_members = pyxd_rectangle_type_members
 */
  #endif //();

  /* "rect/dtypes.pyx":497
 * (<PyTypeObject *> PyXD_Rectangle).tp_compare = &pyxd_rectangle_type_compare
 * emit_endif()
 * (<PyTypeObject *> PyXD_Rectangle).tp_richcompare = pyxd_rectangle_type_richcompare             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_members = pyxd_rectangle_type_members
 * (<PyTypeObject *> PyXD_Rectangle).tp_getset = pyxd_rectangle_type_getset
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_richcompare = __pyx_f_4rect_6dtypes_pyxd_rectangle_type_richcompare;

  /* "rect/dtypes.pyx":498
 * emit_endif()
 * (<PyTypeObject *> PyXD_Rectangle).tp_richcompare = pyxd_rectangle_type_richcompare
 * (<PyTypeObject *> PyXD_Rectangle).tp_members = pyxd_rectangle_type_members             # <<<<<<<<<<<<<<
 * (<PyTypeObject *> PyXD_Rectangle).tp_getset = pyxd_rectangle_type_getset
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_members = __pyx_v_4rect_6dtypes_pyxd_rectangle_type_members;

  /* "rect/dtypes.pyx":499
 * (<PyTypeObject *> PyXD_Rectangle).tp_richcompare = pyxd_rectangle_type_richcompare
 * (<PyTypeObject *> PyXD_Rectangle).tp_members = pyxd_rectangle_type_members
 * (<PyTypeObject *> PyXD_Rectangle).tp_getset = pyxd_rectangle_type_getset             # <<<<<<<<<<<<<<
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)
 * Py_INCREF(PyXD_Rectangle)
 */
  ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)->tp_getset = __pyx_v_4rect_6dtypes_pyxd_rectangle_type_getset;

  /* "rect/dtypes.pyx":500
 * (<PyTypeObject *> PyXD_Rectangle).tp_members = pyxd_rectangle_type_members
 * (<PyTypeObject *> PyXD_Rectangle).tp_getset = pyxd_rectangle_type_getset
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)             # <<<<<<<<<<<<<<
 * Py_INCREF(PyXD_Rectangle)
 * XDRectangle = PyXD_Rectangle
 */
  if (!(likely(((((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle), __pyx_ptype_7cpython_4type_type))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_9 = ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle);
  __Pyx_INCREF(__pyx_t_9);
  __pyx_t_3 = PyType_Ready(((PyTypeObject *)__pyx_t_9)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_4rect_6dtypes_pyxd_rectangle_is_ready = __pyx_t_3;

  /* "rect/dtypes.pyx":501
 * (<PyTypeObject *> PyXD_Rectangle).tp_getset = pyxd_rectangle_type_getset
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)
 * Py_INCREF(PyXD_Rectangle)             # <<<<<<<<<<<<<<
 * XDRectangle = PyXD_Rectangle
 * 
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle);
  __Pyx_INCREF(__pyx_t_9);
  Py_INCREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "rect/dtypes.pyx":502
 * pyxd_rectangle_is_ready = PyType_Ready(<object> PyXD_Rectangle)
 * Py_INCREF(PyXD_Rectangle)
 * XDRectangle = PyXD_Rectangle             # <<<<<<<<<<<<<<
 * 
 * cdef PyArray_Descr * c_xd_rectangle_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__XDRectangle, ((PyObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rect/dtypes.pyx":504
 * XDRectangle = PyXD_Rectangle
 * 
 * cdef PyArray_Descr * c_xd_rectangle_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))             # <<<<<<<<<<<<<<
 * (<PyObject *> c_xd_rectangle_descr).ob_refcnt = 0 # ob_refcnt
 * (<PyObject *> c_xd_rectangle_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr = ((PyArray_Descr *)malloc((sizeof(PyArray_Descr))));

  /* "rect/dtypes.pyx":505
 * 
 * cdef PyArray_Descr * c_xd_rectangle_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
 * (<PyObject *> c_xd_rectangle_descr).ob_refcnt = 0 # ob_refcnt             # <<<<<<<<<<<<<<
 * (<PyObject *> c_xd_rectangle_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 * c_xd_rectangle_descr.typeobj = <PyTypeObject *> PyXD_Rectangle # typeobj
 */
  ((PyObject *)__pyx_v_4rect_6dtypes_c_xd_rectangle_descr)->ob_refcnt = 0;

  /* "rect/dtypes.pyx":506
 * cdef PyArray_Descr * c_xd_rectangle_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
 * (<PyObject *> c_xd_rectangle_descr).ob_refcnt = 0 # ob_refcnt
 * (<PyObject *> c_xd_rectangle_descr).ob_type = <PyTypeObject *> PyArray_API[3]             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.typeobj = <PyTypeObject *> PyXD_Rectangle # typeobj
 * c_xd_rectangle_descr.kind = 'x'  # kind, for xdress
 */
  ((PyObject *)__pyx_v_4rect_6dtypes_c_xd_rectangle_descr)->ob_type = ((PyTypeObject *)(PyArray_API[3]));

  /* "rect/dtypes.pyx":507
 * (<PyObject *> c_xd_rectangle_descr).ob_refcnt = 0 # ob_refcnt
 * (<PyObject *> c_xd_rectangle_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 * c_xd_rectangle_descr.typeobj = <PyTypeObject *> PyXD_Rectangle # typeobj             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.kind = 'x'  # kind, for xdress
 * c_xd_rectangle_descr.type = 'x'  # type
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->typeobj = ((PyTypeObject *)__pyx_v_4rect_6dtypes_PyXD_Rectangle);

  /* "rect/dtypes.pyx":508
 * (<PyObject *> c_xd_rectangle_descr).ob_type = <PyTypeObject *> PyArray_API[3]
 * c_xd_rectangle_descr.typeobj = <PyTypeObject *> PyXD_Rectangle # typeobj
 * c_xd_rectangle_descr.kind = 'x'  # kind, for xdress             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.type = 'x'  # type
 * c_xd_rectangle_descr.byteorder = '='  # byteorder
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->kind = 'x';

  /* "rect/dtypes.pyx":509
 * c_xd_rectangle_descr.typeobj = <PyTypeObject *> PyXD_Rectangle # typeobj
 * c_xd_rectangle_descr.kind = 'x'  # kind, for xdress
 * c_xd_rectangle_descr.type = 'x'  # type             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.byteorder = '='  # byteorder
 * c_xd_rectangle_descr.flags = 0    # flags
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->type = 'x';

  /* "rect/dtypes.pyx":510
 * c_xd_rectangle_descr.kind = 'x'  # kind, for xdress
 * c_xd_rectangle_descr.type = 'x'  # type
 * c_xd_rectangle_descr.byteorder = '='  # byteorder             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.flags = 0    # flags
 * c_xd_rectangle_descr.type_num = 0    # type_num, assigned at registration
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->byteorder = '=';

  /* "rect/dtypes.pyx":511
 * c_xd_rectangle_descr.type = 'x'  # type
 * c_xd_rectangle_descr.byteorder = '='  # byteorder
 * c_xd_rectangle_descr.flags = 0    # flags             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.type_num = 0    # type_num, assigned at registration
 * c_xd_rectangle_descr.elsize = sizeof(cpp_rectangle.Rectangle)  # elsize,
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->flags = 0;

  /* "rect/dtypes.pyx":512
 * c_xd_rectangle_descr.byteorder = '='  # byteorder
 * c_xd_rectangle_descr.flags = 0    # flags
 * c_xd_rectangle_descr.type_num = 0    # type_num, assigned at registration             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.elsize = sizeof(cpp_rectangle.Rectangle)  # elsize,
 * c_xd_rectangle_descr.alignment = 8  # alignment
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->type_num = 0;

  /* "rect/dtypes.pyx":513
 * c_xd_rectangle_descr.flags = 0    # flags
 * c_xd_rectangle_descr.type_num = 0    # type_num, assigned at registration
 * c_xd_rectangle_descr.elsize = sizeof(cpp_rectangle.Rectangle)  # elsize,             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.alignment = 8  # alignment
 * c_xd_rectangle_descr.subarray = NULL  # subarray
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->elsize = (sizeof(shapes::Rectangle));

  /* "rect/dtypes.pyx":514
 * c_xd_rectangle_descr.type_num = 0    # type_num, assigned at registration
 * c_xd_rectangle_descr.elsize = sizeof(cpp_rectangle.Rectangle)  # elsize,
 * c_xd_rectangle_descr.alignment = 8  # alignment             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.subarray = NULL  # subarray
 * c_xd_rectangle_descr.fields = NULL  # fields
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->alignment = 8;

  /* "rect/dtypes.pyx":515
 * c_xd_rectangle_descr.elsize = sizeof(cpp_rectangle.Rectangle)  # elsize,
 * c_xd_rectangle_descr.alignment = 8  # alignment
 * c_xd_rectangle_descr.subarray = NULL  # subarray             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.fields = NULL  # fields
 * c_xd_rectangle_descr.names = NULL
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->subarray = NULL;

  /* "rect/dtypes.pyx":516
 * c_xd_rectangle_descr.alignment = 8  # alignment
 * c_xd_rectangle_descr.subarray = NULL  # subarray
 * c_xd_rectangle_descr.fields = NULL  # fields             # <<<<<<<<<<<<<<
 * c_xd_rectangle_descr.names = NULL
 * (<PyArray_Descr *> c_xd_rectangle_descr).f = <PyArray_ArrFuncs *> &PyXD_Rectangle_ArrFuncs  # f == PyArray_ArrFuncs
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->fields = NULL;

  /* "rect/dtypes.pyx":517
 * c_xd_rectangle_descr.subarray = NULL  # subarray
 * c_xd_rectangle_descr.fields = NULL  # fields
 * c_xd_rectangle_descr.names = NULL             # <<<<<<<<<<<<<<
 * (<PyArray_Descr *> c_xd_rectangle_descr).f = <PyArray_ArrFuncs *> &PyXD_Rectangle_ArrFuncs  # f == PyArray_ArrFuncs
 * 
 */
  __pyx_v_4rect_6dtypes_c_xd_rectangle_descr->names = NULL;

  /* "rect/dtypes.pyx":518
 * c_xd_rectangle_descr.fields = NULL  # fields
 * c_xd_rectangle_descr.names = NULL
 * (<PyArray_Descr *> c_xd_rectangle_descr).f = <PyArray_ArrFuncs *> &PyXD_Rectangle_ArrFuncs  # f == PyArray_ArrFuncs             # <<<<<<<<<<<<<<
 * 
 * cdef object xd_rectangle_descr = <object> (<void *> c_xd_rectangle_descr)
 */
  ((PyArray_Descr *)__pyx_v_4rect_6dtypes_c_xd_rectangle_descr)->f = ((PyArray_ArrFuncs *)(&__pyx_v_4rect_6dtypes_PyXD_Rectangle_ArrFuncs));

  /* "rect/dtypes.pyx":520
 * (<PyArray_Descr *> c_xd_rectangle_descr).f = <PyArray_ArrFuncs *> &PyXD_Rectangle_ArrFuncs  # f == PyArray_ArrFuncs
 * 
 * cdef object xd_rectangle_descr = <object> (<void *> c_xd_rectangle_descr)             # <<<<<<<<<<<<<<
 * Py_INCREF(<object> xd_rectangle_descr)
 * xd_rectangle = xd_rectangle_descr
 */
  __Pyx_INCREF(((PyObject *)((void *)__pyx_v_4rect_6dtypes_c_xd_rectangle_descr)));
  __Pyx_XGOTREF(__pyx_v_4rect_6dtypes_xd_rectangle_descr);
  __Pyx_DECREF_SET(__pyx_v_4rect_6dtypes_xd_rectangle_descr, ((PyObject *)((void *)__pyx_v_4rect_6dtypes_c_xd_rectangle_descr)));
  __Pyx_GIVEREF(((PyObject *)((void *)__pyx_v_4rect_6dtypes_c_xd_rectangle_descr)));

  /* "rect/dtypes.pyx":521
 * 
 * cdef object xd_rectangle_descr = <object> (<void *> c_xd_rectangle_descr)
 * Py_INCREF(<object> xd_rectangle_descr)             # <<<<<<<<<<<<<<
 * xd_rectangle = xd_rectangle_descr
 * cdef int xd_rectangle_num = PyArray_RegisterDataType(c_xd_rectangle_descr)
 */
  __pyx_t_9 = __pyx_v_4rect_6dtypes_xd_rectangle_descr;
  __Pyx_INCREF(__pyx_t_9);
  Py_INCREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "rect/dtypes.pyx":522
 * cdef object xd_rectangle_descr = <object> (<void *> c_xd_rectangle_descr)
 * Py_INCREF(<object> xd_rectangle_descr)
 * xd_rectangle = xd_rectangle_descr             # <<<<<<<<<<<<<<
 * cdef int xd_rectangle_num = PyArray_RegisterDataType(c_xd_rectangle_descr)
 * dtypes['rectangle'] = xd_rectangle
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__xd_rectangle, __pyx_v_4rect_6dtypes_xd_rectangle_descr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "rect/dtypes.pyx":523
 * Py_INCREF(<object> xd_rectangle_descr)
 * xd_rectangle = xd_rectangle_descr
 * cdef int xd_rectangle_num = PyArray_RegisterDataType(c_xd_rectangle_descr)             # <<<<<<<<<<<<<<
 * dtypes['rectangle'] = xd_rectangle
 * dtypes['xd_rectangle'] = xd_rectangle
 */
  __pyx_v_4rect_6dtypes_xd_rectangle_num = PyArray_RegisterDataType(__pyx_v_4rect_6dtypes_c_xd_rectangle_descr);

  /* "rect/dtypes.pyx":524
 * xd_rectangle = xd_rectangle_descr
 * cdef int xd_rectangle_num = PyArray_RegisterDataType(c_xd_rectangle_descr)
 * dtypes['rectangle'] = xd_rectangle             # <<<<<<<<<<<<<<
 * dtypes['xd_rectangle'] = xd_rectangle
 * dtypes[xd_rectangle_num] = xd_rectangle
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s__xd_rectangle); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s__dtypes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__rectangle), __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "rect/dtypes.pyx":525
 * cdef int xd_rectangle_num = PyArray_RegisterDataType(c_xd_rectangle_descr)
 * dtypes['rectangle'] = xd_rectangle
 * dtypes['xd_rectangle'] = xd_rectangle             # <<<<<<<<<<<<<<
 * dtypes[xd_rectangle_num] = xd_rectangle
 * 
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s__xd_rectangle); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s__dtypes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__xd_rectangle), __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "rect/dtypes.pyx":526
 * dtypes['rectangle'] = xd_rectangle
 * dtypes['xd_rectangle'] = xd_rectangle
 * dtypes[xd_rectangle_num] = xd_rectangle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s__xd_rectangle); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s__dtypes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemInt(__pyx_t_2, __pyx_v_4rect_6dtypes_xd_rectangle_num, __pyx_t_9, sizeof(int), PyInt_FromLong, 0, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "rect/dtypes.pyx":1
 * ###################             # <<<<<<<<<<<<<<
 * ###  WARNING!!! ###
 * ###################
 */
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_9));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s____test__, ((PyObject *)__pyx_t_9)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;

  /* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  if (__pyx_m) {
    __Pyx_AddTraceback("init rect.dtypes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rect.dtypes");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        } else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s____import__);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_Py_intptr_t(Py_intptr_t val) {
    const Py_intptr_t neg_one = (Py_intptr_t)-1, const_zero = (Py_intptr_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(Py_intptr_t) == sizeof(char))  ||
        (sizeof(Py_intptr_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(Py_intptr_t) == sizeof(int)) ||
               (sizeof(Py_intptr_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(Py_intptr_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_from_py_Py_intptr_t(PyObject* x) {
    const Py_intptr_t neg_one = (Py_intptr_t)-1, const_zero = (Py_intptr_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(Py_intptr_t) == sizeof(char)) {
        if (is_unsigned)
            return (Py_intptr_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (Py_intptr_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(Py_intptr_t) == sizeof(short)) {
        if (is_unsigned)
            return (Py_intptr_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (Py_intptr_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(Py_intptr_t) == sizeof(int)) {
        if (is_unsigned)
            return (Py_intptr_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (Py_intptr_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(Py_intptr_t) == sizeof(long)) {
        if (is_unsigned)
            return (Py_intptr_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (Py_intptr_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(Py_intptr_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (Py_intptr_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (Py_intptr_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
        #else
        Py_intptr_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_MAJOR_VERSION < 3
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        #endif
        return (Py_intptr_t)-1;
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%s does not export expected C variable %s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3 && PY_MINOR_VERSION==0)
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (r < 0) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       if ((val != (unsigned PY_LONG_LONG)-1) || !PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
